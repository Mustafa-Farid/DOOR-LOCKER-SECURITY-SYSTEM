
FinalProject_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00002ba8  00002c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800164  00800164  00002d40  2**0
                  ALLOC
  3 .stab         000027f0  00000000  00000000  00002d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fdd  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000650d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000664d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000092f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 36       	cpi	r26, 0x67	; 103
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e5       	ldi	r26, 0x58	; 88
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e5       	ldi	r24, 0x58	; 88
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
//********************************* Global Variables ***********************************



int main (void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c9 59       	subi	r28, 0x99	; 153
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 a_oldPassMess[5];
	static uint8 firstTimeFlag = 0;
	uint8 compare ;
	uint8 memValue;
	uint8 operation;
	uint8 screen = 0;
     b60:	fe 01       	movw	r30, r28
     b62:	ec 58       	subi	r30, 0x8C	; 140
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
	uint8 state;
	uint8 wrongPW = 0;
     b68:	fe 01       	movw	r30, r28
     b6a:	ee 58       	subi	r30, 0x8E	; 142
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	10 82       	st	Z, r1
	/*
	 * structures to configure Modules
	 */
	Timer0_ConfigType Timer0_Config = {F_CPU_256};
     b70:	fe 01       	movw	r30, r28
     b72:	ef 56       	subi	r30, 0x6F	; 111
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	80 83       	st	Z, r24
	UART_ConfigType UART_Config = { ENABLED_EVEN , TWO_BIT_STOP , EIGHT_BIT};
     b7a:	ce 01       	movw	r24, r28
     b7c:	8e 56       	subi	r24, 0x6E	; 110
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	cb 56       	subi	r28, 0x6B	; 107
     b82:	df 4f       	sbci	r29, 0xFF	; 255
     b84:	99 83       	std	Y+1, r25	; 0x01
     b86:	88 83       	st	Y, r24
     b88:	c5 59       	subi	r28, 0x95	; 149
     b8a:	d0 40       	sbci	r29, 0x00	; 0
     b8c:	80 e6       	ldi	r24, 0x60	; 96
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	c9 56       	subi	r28, 0x69	; 105
     b92:	df 4f       	sbci	r29, 0xFF	; 255
     b94:	99 83       	std	Y+1, r25	; 0x01
     b96:	88 83       	st	Y, r24
     b98:	c7 59       	subi	r28, 0x97	; 151
     b9a:	d0 40       	sbci	r29, 0x00	; 0
     b9c:	93 e0       	ldi	r25, 0x03	; 3
     b9e:	c7 56       	subi	r28, 0x67	; 103
     ba0:	df 4f       	sbci	r29, 0xFF	; 255
     ba2:	98 83       	st	Y, r25
     ba4:	c9 59       	subi	r28, 0x99	; 153
     ba6:	d0 40       	sbci	r29, 0x00	; 0
     ba8:	c9 56       	subi	r28, 0x69	; 105
     baa:	df 4f       	sbci	r29, 0xFF	; 255
     bac:	e8 81       	ld	r30, Y
     bae:	f9 81       	ldd	r31, Y+1	; 0x01
     bb0:	c7 59       	subi	r28, 0x97	; 151
     bb2:	d0 40       	sbci	r29, 0x00	; 0
     bb4:	00 80       	ld	r0, Z
     bb6:	c9 56       	subi	r28, 0x69	; 105
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	c7 59       	subi	r28, 0x97	; 151
     bc0:	d0 40       	sbci	r29, 0x00	; 0
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	c9 56       	subi	r28, 0x69	; 105
     bc6:	df 4f       	sbci	r29, 0xFF	; 255
     bc8:	99 83       	std	Y+1, r25	; 0x01
     bca:	88 83       	st	Y, r24
     bcc:	c7 59       	subi	r28, 0x97	; 151
     bce:	d0 40       	sbci	r29, 0x00	; 0
     bd0:	cb 56       	subi	r28, 0x6B	; 107
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	e8 81       	ld	r30, Y
     bd6:	f9 81       	ldd	r31, Y+1	; 0x01
     bd8:	c5 59       	subi	r28, 0x95	; 149
     bda:	d0 40       	sbci	r29, 0x00	; 0
     bdc:	00 82       	st	Z, r0
     bde:	cb 56       	subi	r28, 0x6B	; 107
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	c5 59       	subi	r28, 0x95	; 149
     be8:	d0 40       	sbci	r29, 0x00	; 0
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	cb 56       	subi	r28, 0x6B	; 107
     bee:	df 4f       	sbci	r29, 0xFF	; 255
     bf0:	99 83       	std	Y+1, r25	; 0x01
     bf2:	88 83       	st	Y, r24
     bf4:	c5 59       	subi	r28, 0x95	; 149
     bf6:	d0 40       	sbci	r29, 0x00	; 0
     bf8:	c7 56       	subi	r28, 0x67	; 103
     bfa:	df 4f       	sbci	r29, 0xFF	; 255
     bfc:	98 81       	ld	r25, Y
     bfe:	c9 59       	subi	r28, 0x99	; 153
     c00:	d0 40       	sbci	r29, 0x00	; 0
     c02:	91 50       	subi	r25, 0x01	; 1
     c04:	c7 56       	subi	r28, 0x67	; 103
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	98 83       	st	Y, r25
     c0a:	c9 59       	subi	r28, 0x99	; 153
     c0c:	d0 40       	sbci	r29, 0x00	; 0
     c0e:	c7 56       	subi	r28, 0x67	; 103
     c10:	df 4f       	sbci	r29, 0xFF	; 255
     c12:	e8 81       	ld	r30, Y
     c14:	c9 59       	subi	r28, 0x99	; 153
     c16:	d0 40       	sbci	r29, 0x00	; 0
     c18:	ee 23       	and	r30, r30
     c1a:	31 f6       	brne	.-116    	; 0xba8 <main+0x62>
	// ******************************** initialize modules***********************************
	LCD_init();
     c1c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_init>
	UART_init(&UART_Config);
     c20:	ce 01       	movw	r24, r28
     c22:	8e 56       	subi	r24, 0x6E	; 110
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	0e 94 4f 14 	call	0x289e	; 0x289e <UART_init>
	SREG |=(1<<7);
     c2a:	af e5       	ldi	r26, 0x5F	; 95
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ef e5       	ldi	r30, 0x5F	; 95
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	80 68       	ori	r24, 0x80	; 128
     c36:	8c 93       	st	X, r24
     c38:	fe 01       	movw	r30, r28
     c3a:	e3 59       	subi	r30, 0x93	; 147
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a8 e4       	ldi	r26, 0x48	; 72
     c44:	b2 e4       	ldi	r27, 0x42	; 66
     c46:	80 83       	st	Z, r24
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	a2 83       	std	Z+2, r26	; 0x02
     c4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	8e 01       	movw	r16, r28
     c50:	07 59       	subi	r16, 0x97	; 151
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	fe 01       	movw	r30, r28
     c56:	e3 59       	subi	r30, 0x93	; 147
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	60 81       	ld	r22, Z
     c5c:	71 81       	ldd	r23, Z+1	; 0x01
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	4a ef       	ldi	r20, 0xFA	; 250
     c68:	54 e4       	ldi	r21, 0x44	; 68
     c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	f8 01       	movw	r30, r16
     c74:	80 83       	st	Z, r24
     c76:	91 83       	std	Z+1, r25	; 0x01
     c78:	a2 83       	std	Z+2, r26	; 0x02
     c7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c7c:	fe 01       	movw	r30, r28
     c7e:	e7 59       	subi	r30, 0x97	; 151
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e8       	ldi	r20, 0x80	; 128
     c90:	5f e3       	ldi	r21, 0x3F	; 63
     c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c96:	88 23       	and	r24, r24
     c98:	44 f4       	brge	.+16     	; 0xcaa <main+0x164>
		__ticks = 1;
     c9a:	fe 01       	movw	r30, r28
     c9c:	e9 59       	subi	r30, 0x99	; 153
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
     ca8:	64 c0       	rjmp	.+200    	; 0xd72 <main+0x22c>
	else if (__tmp > 65535)
     caa:	fe 01       	movw	r30, r28
     cac:	e7 59       	subi	r30, 0x97	; 151
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	4f e7       	ldi	r20, 0x7F	; 127
     cbe:	57 e4       	ldi	r21, 0x47	; 71
     cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	0c f0       	brlt	.+2      	; 0xcca <main+0x184>
     cc8:	43 c0       	rjmp	.+134    	; 0xd50 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cca:	fe 01       	movw	r30, r28
     ccc:	e3 59       	subi	r30, 0x93	; 147
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	60 81       	ld	r22, Z
     cd2:	71 81       	ldd	r23, Z+1	; 0x01
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e2       	ldi	r20, 0x20	; 32
     cde:	51 e4       	ldi	r21, 0x41	; 65
     ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	8e 01       	movw	r16, r28
     cea:	09 59       	subi	r16, 0x99	; 153
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	f8 01       	movw	r30, r16
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
     d00:	1f c0       	rjmp	.+62     	; 0xd40 <main+0x1fa>
     d02:	fe 01       	movw	r30, r28
     d04:	eb 59       	subi	r30, 0x9B	; 155
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	88 ec       	ldi	r24, 0xC8	; 200
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	91 83       	std	Z+1, r25	; 0x01
     d0e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d10:	fe 01       	movw	r30, r28
     d12:	eb 59       	subi	r30, 0x9B	; 155
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <main+0x1d4>
     d1e:	fe 01       	movw	r30, r28
     d20:	eb 59       	subi	r30, 0x9B	; 155
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d28:	de 01       	movw	r26, r28
     d2a:	a9 59       	subi	r26, 0x99	; 153
     d2c:	bf 4f       	sbci	r27, 0xFF	; 255
     d2e:	fe 01       	movw	r30, r28
     d30:	e9 59       	subi	r30, 0x99	; 153
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	9c 93       	st	X, r25
     d3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d40:	fe 01       	movw	r30, r28
     d42:	e9 59       	subi	r30, 0x99	; 153
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	d1 f6       	brne	.-76     	; 0xd02 <main+0x1bc>
     d4e:	27 c0       	rjmp	.+78     	; 0xd9e <main+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d50:	8e 01       	movw	r16, r28
     d52:	09 59       	subi	r16, 0x99	; 153
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	fe 01       	movw	r30, r28
     d58:	e7 59       	subi	r30, 0x97	; 151
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	f8 01       	movw	r30, r16
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
     d72:	de 01       	movw	r26, r28
     d74:	ad 59       	subi	r26, 0x9D	; 157
     d76:	bf 4f       	sbci	r27, 0xFF	; 255
     d78:	fe 01       	movw	r30, r28
     d7a:	e9 59       	subi	r30, 0x99	; 153
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	8d 93       	st	X+, r24
     d84:	9c 93       	st	X, r25
     d86:	fe 01       	movw	r30, r28
     d88:	ed 59       	subi	r30, 0x9D	; 157
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	80 81       	ld	r24, Z
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <main+0x24a>
     d94:	fe 01       	movw	r30, r28
     d96:	ed 59       	subi	r30, 0x9D	; 157
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	80 83       	st	Z, r24
	_delay_ms(50);
	while(1)
	{
		memValue = eeprom_read_byte((uint8 *)INTERNAL_MEMORY_ADD);
     d9e:	8f e0       	ldi	r24, 0x0F	; 15
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__eerd_byte_m16>
     da6:	fe 01       	movw	r30, r28
     da8:	ea 58       	subi	r30, 0x8A	; 138
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	80 83       	st	Z, r24
		if(memValue != INTERNAL_MEMORY_DATA)
     dae:	fe 01       	movw	r30, r28
     db0:	ea 58       	subi	r30, 0x8A	; 138
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 81       	ld	r24, Z
     db6:	80 31       	cpi	r24, 0x10	; 16
     db8:	19 f0       	breq	.+6      	; 0xdc0 <main+0x27a>
		{
			firstTimeFlag = 0;
     dba:	10 92 64 01 	sts	0x0164, r1
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <main+0x28c>
		}
		else if (memValue == INTERNAL_MEMORY_DATA)
     dc0:	fe 01       	movw	r30, r28
     dc2:	ea 58       	subi	r30, 0x8A	; 138
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	80 31       	cpi	r24, 0x10	; 16
     dca:	19 f4       	brne	.+6      	; 0xdd2 <main+0x28c>
		{
			firstTimeFlag = 1;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 64 01 	sts	0x0164, r24
		}
		if(firstTimeFlag == 0)
     dd2:	80 91 64 01 	lds	r24, 0x0164
     dd6:	88 23       	and	r24, r24
     dd8:	09 f0       	breq	.+2      	; 0xddc <main+0x296>
     dda:	c8 c1       	rjmp	.+912    	; 0x116c <main+0x626>
			{

				LCD_displayString("enter 4 digit PW");
     ddc:	80 e6       	ldi	r24, 0x60	; 96
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_displayString>
				getPassword(a_firstPassword);
     de4:	ce 01       	movw	r24, r28
     de6:	88 58       	subi	r24, 0x88	; 136
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	0e 94 3a 13 	call	0x2674	; 0x2674 <getPassword>
				LCD_clearScreen();
     dee:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
				LCD_displayString("Re-enter 4 digit PW");
     df2:	81 e7       	ldi	r24, 0x71	; 113
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_displayString>
				getPassword(a_secondPassword);
     dfa:	ce 01       	movw	r24, r28
     dfc:	83 58       	subi	r24, 0x83	; 131
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	0e 94 3a 13 	call	0x2674	; 0x2674 <getPassword>
				compare = strcmp(a_firstPassword ,a_secondPassword );
     e04:	ce 01       	movw	r24, r28
     e06:	88 58       	subi	r24, 0x88	; 136
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	9e 01       	movw	r18, r28
     e0c:	23 58       	subi	r18, 0x83	; 131
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255
     e10:	b9 01       	movw	r22, r18
     e12:	0e 94 6f 15 	call	0x2ade	; 0x2ade <strcmp>
     e16:	fe 01       	movw	r30, r28
     e18:	e9 58       	subi	r30, 0x89	; 137
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 83       	st	Z, r24
				if(compare == 0)
     e1e:	fe 01       	movw	r30, r28
     e20:	e9 58       	subi	r30, 0x89	; 137
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 81       	ld	r24, Z
     e26:	88 23       	and	r24, r24
     e28:	09 f0       	breq	.+2      	; 0xe2c <main+0x2e6>
     e2a:	da c0       	rjmp	.+436    	; 0xfe0 <main+0x49a>
				{
					eeprom_write_byte((uint8 *)INTERNAL_MEMORY_ADD,INTERNAL_MEMORY_DATA);
     e2c:	8f e0       	ldi	r24, 0x0F	; 15
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	60 e1       	ldi	r22, 0x10	; 16
     e32:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__eewr_byte_m16>

					LCD_clearScreen();
     e36:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "password");
     e3a:	25 e8       	ldi	r18, 0x85	; 133
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	a9 01       	movw	r20, r18
     e44:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Match");
     e48:	2e e8       	ldi	r18, 0x8E	; 142
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	a9 01       	movw	r20, r18
     e52:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
     e56:	fe 01       	movw	r30, r28
     e58:	e1 5a       	subi	r30, 0xA1	; 161
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	aa e7       	ldi	r26, 0x7A	; 122
     e62:	b4 e4       	ldi	r27, 0x44	; 68
     e64:	80 83       	st	Z, r24
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	a2 83       	std	Z+2, r26	; 0x02
     e6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6c:	8e 01       	movw	r16, r28
     e6e:	05 5a       	subi	r16, 0xA5	; 165
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	fe 01       	movw	r30, r28
     e74:	e1 5a       	subi	r30, 0xA1	; 161
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	4a ef       	ldi	r20, 0xFA	; 250
     e86:	54 e4       	ldi	r21, 0x44	; 68
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	f8 01       	movw	r30, r16
     e92:	80 83       	st	Z, r24
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	a2 83       	std	Z+2, r26	; 0x02
     e98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e9a:	fe 01       	movw	r30, r28
     e9c:	e5 5a       	subi	r30, 0xA5	; 165
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb4:	88 23       	and	r24, r24
     eb6:	44 f4       	brge	.+16     	; 0xec8 <main+0x382>
		__ticks = 1;
     eb8:	fe 01       	movw	r30, r28
     eba:	e7 5a       	subi	r30, 0xA7	; 167
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	80 83       	st	Z, r24
     ec6:	64 c0       	rjmp	.+200    	; 0xf90 <main+0x44a>
	else if (__tmp > 65535)
     ec8:	fe 01       	movw	r30, r28
     eca:	e5 5a       	subi	r30, 0xA5	; 165
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	3f ef       	ldi	r19, 0xFF	; 255
     eda:	4f e7       	ldi	r20, 0x7F	; 127
     edc:	57 e4       	ldi	r21, 0x47	; 71
     ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	0c f0       	brlt	.+2      	; 0xee8 <main+0x3a2>
     ee6:	43 c0       	rjmp	.+134    	; 0xf6e <main+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	fe 01       	movw	r30, r28
     eea:	e1 5a       	subi	r30, 0xA1	; 161
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	8e 01       	movw	r16, r28
     f08:	07 5a       	subi	r16, 0xA7	; 167
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	f8 01       	movw	r30, r16
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
     f1e:	1f c0       	rjmp	.+62     	; 0xf5e <main+0x418>
     f20:	fe 01       	movw	r30, r28
     f22:	e9 5a       	subi	r30, 0xA9	; 169
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	88 ec       	ldi	r24, 0xC8	; 200
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	80 83       	st	Z, r24
     f2e:	fe 01       	movw	r30, r28
     f30:	e9 5a       	subi	r30, 0xA9	; 169
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	91 81       	ldd	r25, Z+1	; 0x01
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <main+0x3f2>
     f3c:	fe 01       	movw	r30, r28
     f3e:	e9 5a       	subi	r30, 0xA9	; 169
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f46:	de 01       	movw	r26, r28
     f48:	a7 5a       	subi	r26, 0xA7	; 167
     f4a:	bf 4f       	sbci	r27, 0xFF	; 255
     f4c:	fe 01       	movw	r30, r28
     f4e:	e7 5a       	subi	r30, 0xA7	; 167
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	11 96       	adiw	r26, 0x01	; 1
     f5a:	9c 93       	st	X, r25
     f5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	fe 01       	movw	r30, r28
     f60:	e7 5a       	subi	r30, 0xA7	; 167
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	d1 f6       	brne	.-76     	; 0xf20 <main+0x3da>
     f6c:	27 c0       	rjmp	.+78     	; 0xfbc <main+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6e:	8e 01       	movw	r16, r28
     f70:	07 5a       	subi	r16, 0xA7	; 167
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	fe 01       	movw	r30, r28
     f76:	e5 5a       	subi	r30, 0xA5	; 165
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	f8 01       	movw	r30, r16
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
     f90:	de 01       	movw	r26, r28
     f92:	ab 5a       	subi	r26, 0xAB	; 171
     f94:	bf 4f       	sbci	r27, 0xFF	; 255
     f96:	fe 01       	movw	r30, r28
     f98:	e7 5a       	subi	r30, 0xA7	; 167
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	8d 93       	st	X+, r24
     fa2:	9c 93       	st	X, r25
     fa4:	fe 01       	movw	r30, r28
     fa6:	eb 5a       	subi	r30, 0xAB	; 171
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <main+0x468>
     fb2:	fe 01       	movw	r30, r28
     fb4:	eb 5a       	subi	r30, 0xAB	; 171
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
					_delay_ms(1000);
					readyToSend(a_firstPassword , a_message);
     fbc:	ce 01       	movw	r24, r28
     fbe:	88 58       	subi	r24, 0x88	; 136
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	9e 01       	movw	r18, r28
     fc4:	2e 57       	subi	r18, 0x7E	; 126
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	b9 01       	movw	r22, r18
     fca:	0e 94 0e 14 	call	0x281c	; 0x281c <readyToSend>
					UART_sendByte(SAVE_PASSWORD);
     fce:	8b e0       	ldi	r24, 0x0B	; 11
     fd0:	0e 94 a6 14 	call	0x294c	; 0x294c <UART_sendByte>
					UART_sendString(a_message);
     fd4:	ce 01       	movw	r24, r28
     fd6:	8e 57       	subi	r24, 0x7E	; 126
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	0e 94 cc 14 	call	0x2998	; 0x2998 <UART_sendString>
     fde:	df ce       	rjmp	.-578    	; 0xd9e <main+0x258>

				}
				else
				{
					LCD_clearScreen();
     fe0:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "password");
     fe4:	25 e8       	ldi	r18, 0x85	; 133
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	a9 01       	movw	r20, r18
     fee:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, " don't Match");
     ff2:	24 e9       	ldi	r18, 0x94	; 148
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	a9 01       	movw	r20, r18
     ffc:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
    1000:	fe 01       	movw	r30, r28
    1002:	ef 5a       	subi	r30, 0xAF	; 175
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	aa e7       	ldi	r26, 0x7A	; 122
    100c:	b4 e4       	ldi	r27, 0x44	; 68
    100e:	80 83       	st	Z, r24
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	a2 83       	std	Z+2, r26	; 0x02
    1014:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1016:	8e 01       	movw	r16, r28
    1018:	03 5b       	subi	r16, 0xB3	; 179
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	fe 01       	movw	r30, r28
    101e:	ef 5a       	subi	r30, 0xAF	; 175
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a ef       	ldi	r20, 0xFA	; 250
    1030:	54 e4       	ldi	r21, 0x44	; 68
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24
    103e:	91 83       	std	Z+1, r25	; 0x01
    1040:	a2 83       	std	Z+2, r26	; 0x02
    1042:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1044:	fe 01       	movw	r30, r28
    1046:	e3 5b       	subi	r30, 0xB3	; 179
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105e:	88 23       	and	r24, r24
    1060:	44 f4       	brge	.+16     	; 0x1072 <main+0x52c>
		__ticks = 1;
    1062:	fe 01       	movw	r30, r28
    1064:	e5 5b       	subi	r30, 0xB5	; 181
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	64 c0       	rjmp	.+200    	; 0x113a <main+0x5f4>
	else if (__tmp > 65535)
    1072:	fe 01       	movw	r30, r28
    1074:	e3 5b       	subi	r30, 0xB3	; 179
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	3f ef       	ldi	r19, 0xFF	; 255
    1084:	4f e7       	ldi	r20, 0x7F	; 127
    1086:	57 e4       	ldi	r21, 0x47	; 71
    1088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    108c:	18 16       	cp	r1, r24
    108e:	0c f0       	brlt	.+2      	; 0x1092 <main+0x54c>
    1090:	43 c0       	rjmp	.+134    	; 0x1118 <main+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	fe 01       	movw	r30, r28
    1094:	ef 5a       	subi	r30, 0xAF	; 175
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8e 01       	movw	r16, r28
    10b2:	05 5b       	subi	r16, 0xB5	; 181
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	f8 01       	movw	r30, r16
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
    10c8:	1f c0       	rjmp	.+62     	; 0x1108 <main+0x5c2>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e7 5b       	subi	r30, 0xB7	; 183
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	88 ec       	ldi	r24, 0xC8	; 200
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
    10d8:	fe 01       	movw	r30, r28
    10da:	e7 5b       	subi	r30, 0xB7	; 183
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <main+0x59c>
    10e6:	fe 01       	movw	r30, r28
    10e8:	e7 5b       	subi	r30, 0xB7	; 183
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f0:	de 01       	movw	r26, r28
    10f2:	a5 5b       	subi	r26, 0xB5	; 181
    10f4:	bf 4f       	sbci	r27, 0xFF	; 255
    10f6:	fe 01       	movw	r30, r28
    10f8:	e5 5b       	subi	r30, 0xB5	; 181
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	11 96       	adiw	r26, 0x01	; 1
    1104:	9c 93       	st	X, r25
    1106:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	fe 01       	movw	r30, r28
    110a:	e5 5b       	subi	r30, 0xB5	; 181
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	d1 f6       	brne	.-76     	; 0x10ca <main+0x584>
    1116:	27 c0       	rjmp	.+78     	; 0x1166 <main+0x620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	8e 01       	movw	r16, r28
    111a:	05 5b       	subi	r16, 0xB5	; 181
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	fe 01       	movw	r30, r28
    1120:	e3 5b       	subi	r30, 0xB3	; 179
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	f8 01       	movw	r30, r16
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	de 01       	movw	r26, r28
    113c:	a9 5b       	subi	r26, 0xB9	; 185
    113e:	bf 4f       	sbci	r27, 0xFF	; 255
    1140:	fe 01       	movw	r30, r28
    1142:	e5 5b       	subi	r30, 0xB5	; 181
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	8d 93       	st	X+, r24
    114c:	9c 93       	st	X, r25
    114e:	fe 01       	movw	r30, r28
    1150:	e9 5b       	subi	r30, 0xB9	; 185
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <main+0x612>
    115c:	fe 01       	movw	r30, r28
    115e:	e9 5b       	subi	r30, 0xB9	; 185
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen();
    1166:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
    116a:	19 ce       	rjmp	.-974    	; 0xd9e <main+0x258>

				}
			}
		else if(firstTimeFlag == 1)
    116c:	80 91 64 01 	lds	r24, 0x0164
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	09 f0       	breq	.+2      	; 0x1176 <main+0x630>
    1174:	14 ce       	rjmp	.-984    	; 0xd9e <main+0x258>
		{
			if(screen == 0)
    1176:	fe 01       	movw	r30, r28
    1178:	ec 58       	subi	r30, 0x8C	; 140
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	88 23       	and	r24, r24
    1180:	09 f0       	breq	.+2      	; 0x1184 <main+0x63e>
    1182:	29 c1       	rjmp	.+594    	; 0x13d6 <main+0x890>
			{

				LCD_clearScreen();
    1184:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "0:Open Door");
    1188:	21 ea       	ldi	r18, 0xA1	; 161
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "1:Change PW");
    1196:	2d ea       	ldi	r18, 0xAD	; 173
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
				operation = KeyPad_getPressedKey();
    11a4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <KeyPad_getPressedKey>
    11a8:	fe 01       	movw	r30, r28
    11aa:	eb 58       	subi	r30, 0x8B	; 139
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	80 83       	st	Z, r24
    11b0:	fe 01       	movw	r30, r28
    11b2:	ed 5b       	subi	r30, 0xBD	; 189
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a8 ec       	ldi	r26, 0xC8	; 200
    11bc:	b3 e4       	ldi	r27, 0x43	; 67
    11be:	80 83       	st	Z, r24
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	a2 83       	std	Z+2, r26	; 0x02
    11c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c6:	8e 01       	movw	r16, r28
    11c8:	01 5c       	subi	r16, 0xC1	; 193
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	fe 01       	movw	r30, r28
    11ce:	ed 5b       	subi	r30, 0xBD	; 189
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	60 81       	ld	r22, Z
    11d4:	71 81       	ldd	r23, Z+1	; 0x01
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	4a ef       	ldi	r20, 0xFA	; 250
    11e0:	54 e4       	ldi	r21, 0x44	; 68
    11e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	f8 01       	movw	r30, r16
    11ec:	80 83       	st	Z, r24
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	a2 83       	std	Z+2, r26	; 0x02
    11f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11f4:	fe 01       	movw	r30, r28
    11f6:	ff 96       	adiw	r30, 0x3f	; 63
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e8       	ldi	r20, 0x80	; 128
    1206:	5f e3       	ldi	r21, 0x3F	; 63
    1208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120c:	88 23       	and	r24, r24
    120e:	2c f4       	brge	.+10     	; 0x121a <main+0x6d4>
		__ticks = 1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9e af       	std	Y+62, r25	; 0x3e
    1216:	8d af       	std	Y+61, r24	; 0x3d
    1218:	46 c0       	rjmp	.+140    	; 0x12a6 <main+0x760>
	else if (__tmp > 65535)
    121a:	fe 01       	movw	r30, r28
    121c:	ff 96       	adiw	r30, 0x3f	; 63
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	3f ef       	ldi	r19, 0xFF	; 255
    122a:	4f e7       	ldi	r20, 0x7F	; 127
    122c:	57 e4       	ldi	r21, 0x47	; 71
    122e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1232:	18 16       	cp	r1, r24
    1234:	64 f5       	brge	.+88     	; 0x128e <main+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1236:	fe 01       	movw	r30, r28
    1238:	ed 5b       	subi	r30, 0xBD	; 189
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	60 81       	ld	r22, Z
    123e:	71 81       	ldd	r23, Z+1	; 0x01
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e2       	ldi	r20, 0x20	; 32
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9e af       	std	Y+62, r25	; 0x3e
    1262:	8d af       	std	Y+61, r24	; 0x3d
    1264:	0f c0       	rjmp	.+30     	; 0x1284 <main+0x73e>
    1266:	88 ec       	ldi	r24, 0xC8	; 200
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c af       	std	Y+60, r25	; 0x3c
    126c:	8b af       	std	Y+59, r24	; 0x3b
    126e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1270:	9c ad       	ldd	r25, Y+60	; 0x3c
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <main+0x72c>
    1276:	9c af       	std	Y+60, r25	; 0x3c
    1278:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127a:	8d ad       	ldd	r24, Y+61	; 0x3d
    127c:	9e ad       	ldd	r25, Y+62	; 0x3e
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	9e af       	std	Y+62, r25	; 0x3e
    1282:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1284:	8d ad       	ldd	r24, Y+61	; 0x3d
    1286:	9e ad       	ldd	r25, Y+62	; 0x3e
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	69 f7       	brne	.-38     	; 0x1266 <main+0x720>
    128c:	16 c0       	rjmp	.+44     	; 0x12ba <main+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128e:	fe 01       	movw	r30, r28
    1290:	ff 96       	adiw	r30, 0x3f	; 63
    1292:	60 81       	ld	r22, Z
    1294:	71 81       	ldd	r23, Z+1	; 0x01
    1296:	82 81       	ldd	r24, Z+2	; 0x02
    1298:	93 81       	ldd	r25, Z+3	; 0x03
    129a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	9e af       	std	Y+62, r25	; 0x3e
    12a4:	8d af       	std	Y+61, r24	; 0x3d
    12a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12aa:	9a af       	std	Y+58, r25	; 0x3a
    12ac:	89 af       	std	Y+57, r24	; 0x39
    12ae:	89 ad       	ldd	r24, Y+57	; 0x39
    12b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <main+0x76c>
    12b6:	9a af       	std	Y+58, r25	; 0x3a
    12b8:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(400);
				if(operation == 0)
    12ba:	fe 01       	movw	r30, r28
    12bc:	eb 58       	subi	r30, 0x8B	; 139
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	88 23       	and	r24, r24
    12c4:	29 f5       	brne	.+74     	; 0x1310 <main+0x7ca>
				{
					LCD_clearScreen();
    12c6:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "please enter PW");
    12ca:	29 eb       	ldi	r18, 0xB9	; 185
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					getPassword(a_firstPassword);
    12d8:	ce 01       	movw	r24, r28
    12da:	88 58       	subi	r24, 0x88	; 136
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	0e 94 3a 13 	call	0x2674	; 0x2674 <getPassword>
					readyToSend(a_firstPassword , a_message);
    12e2:	ce 01       	movw	r24, r28
    12e4:	88 58       	subi	r24, 0x88	; 136
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	9e 01       	movw	r18, r28
    12ea:	2e 57       	subi	r18, 0x7E	; 126
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	b9 01       	movw	r22, r18
    12f0:	0e 94 0e 14 	call	0x281c	; 0x281c <readyToSend>
					UART_sendByte(OPEN_DOOR);
    12f4:	8d e0       	ldi	r24, 0x0D	; 13
    12f6:	0e 94 a6 14 	call	0x294c	; 0x294c <UART_sendByte>
					UART_sendString(a_message);
    12fa:	ce 01       	movw	r24, r28
    12fc:	8e 57       	subi	r24, 0x7E	; 126
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	0e 94 cc 14 	call	0x2998	; 0x2998 <UART_sendString>
					screen = 1;
    1304:	fe 01       	movw	r30, r28
    1306:	ec 58       	subi	r30, 0x8C	; 140
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24
    130e:	47 cd       	rjmp	.-1394   	; 0xd9e <main+0x258>
				}
				else if(operation == 1)
    1310:	fe 01       	movw	r30, r28
    1312:	eb 58       	subi	r30, 0x8B	; 139
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	09 f0       	breq	.+2      	; 0x131e <main+0x7d8>
    131c:	40 cd       	rjmp	.-1408   	; 0xd9e <main+0x258>
				{
					LCD_clearScreen();
    131e:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, " enter old PW");
    1322:	29 ec       	ldi	r18, 0xC9	; 201
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	a9 01       	movw	r20, r18
    132c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					getPassword(a_firstPassword);
    1330:	ce 01       	movw	r24, r28
    1332:	88 58       	subi	r24, 0x88	; 136
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	0e 94 3a 13 	call	0x2674	; 0x2674 <getPassword>
					for(uint8 i = 0 ; i < 5 ; i++)						// FIXING approving change password BUG
    133a:	fe 01       	movw	r30, r28
    133c:	ef 58       	subi	r30, 0x8F	; 143
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	10 82       	st	Z, r1
    1342:	23 c0       	rjmp	.+70     	; 0x138a <main+0x844>
					{
						a_oldPass[i] = a_firstPassword[i];
    1344:	fe 01       	movw	r30, r28
    1346:	ef 58       	subi	r30, 0x8F	; 143
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	fe 01       	movw	r30, r28
    1352:	ef 58       	subi	r30, 0x8F	; 143
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 81       	ld	r24, Z
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	ce 01       	movw	r24, r28
    135e:	88 58       	subi	r24, 0x88	; 136
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	fc 01       	movw	r30, r24
    1364:	e2 0f       	add	r30, r18
    1366:	f3 1f       	adc	r31, r19
    1368:	20 81       	ld	r18, Z
    136a:	ce 01       	movw	r24, r28
    136c:	89 57       	subi	r24, 0x79	; 121
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	fc 01       	movw	r30, r24
    1372:	e4 0f       	add	r30, r20
    1374:	f5 1f       	adc	r31, r21
    1376:	20 83       	st	Z, r18
				else if(operation == 1)
				{
					LCD_clearScreen();
					LCD_displayStringRowColumn(0, 0, " enter old PW");
					getPassword(a_firstPassword);
					for(uint8 i = 0 ; i < 5 ; i++)						// FIXING approving change password BUG
    1378:	de 01       	movw	r26, r28
    137a:	af 58       	subi	r26, 0x8F	; 143
    137c:	bf 4f       	sbci	r27, 0xFF	; 255
    137e:	fe 01       	movw	r30, r28
    1380:	ef 58       	subi	r30, 0x8F	; 143
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	8c 93       	st	X, r24
    138a:	fe 01       	movw	r30, r28
    138c:	ef 58       	subi	r30, 0x8F	; 143
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	85 30       	cpi	r24, 0x05	; 5
    1394:	b8 f2       	brcs	.-82     	; 0x1344 <main+0x7fe>
					{
						a_oldPass[i] = a_firstPassword[i];
					}
					readyToSend(a_oldPass , a_oldPassMess);				// END
    1396:	ce 01       	movw	r24, r28
    1398:	89 57       	subi	r24, 0x79	; 121
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	9e 01       	movw	r18, r28
    139e:	24 57       	subi	r18, 0x74	; 116
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	b9 01       	movw	r22, r18
    13a4:	0e 94 0e 14 	call	0x281c	; 0x281c <readyToSend>
					readyToSend(a_firstPassword , a_message);
    13a8:	ce 01       	movw	r24, r28
    13aa:	88 58       	subi	r24, 0x88	; 136
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	9e 01       	movw	r18, r28
    13b0:	2e 57       	subi	r18, 0x7E	; 126
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	b9 01       	movw	r22, r18
    13b6:	0e 94 0e 14 	call	0x281c	; 0x281c <readyToSend>
					UART_sendByte(CHANGE_PASSWORD);
    13ba:	8e e0       	ldi	r24, 0x0E	; 14
    13bc:	0e 94 a6 14 	call	0x294c	; 0x294c <UART_sendByte>
					UART_sendString(a_message);
    13c0:	ce 01       	movw	r24, r28
    13c2:	8e 57       	subi	r24, 0x7E	; 126
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	0e 94 cc 14 	call	0x2998	; 0x2998 <UART_sendString>
					screen = 2 ;
    13ca:	fe 01       	movw	r30, r28
    13cc:	ec 58       	subi	r30, 0x8C	; 140
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	80 83       	st	Z, r24
    13d4:	e4 cc       	rjmp	.-1592   	; 0xd9e <main+0x258>
				}
			}
			else if(screen == 1)
    13d6:	fe 01       	movw	r30, r28
    13d8:	ec 58       	subi	r30, 0x8C	; 140
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 81       	ld	r24, Z
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <main+0x89e>
    13e2:	16 c1       	rjmp	.+556    	; 0x1610 <main+0xaca>
			{
				state = UART_recieveByte();
    13e4:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_recieveByte>
    13e8:	fe 01       	movw	r30, r28
    13ea:	ed 58       	subi	r30, 0x8D	; 141
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 83       	st	Z, r24
				LCD_clearScreen();
    13f0:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
				if(state == CORRECT_PW)
    13f4:	fe 01       	movw	r30, r28
    13f6:	ed 58       	subi	r30, 0x8D	; 141
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 30       	cpi	r24, 0x0F	; 15
    13fe:	09 f0       	breq	.+2      	; 0x1402 <main+0x8bc>
    1400:	4b c0       	rjmp	.+150    	; 0x1498 <main+0x952>
				{
					LCD_displayStringRowColumn(0, 0, "OPENING DOOR 10s");
    1402:	27 ed       	ldi	r18, 0xD7	; 215
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					timer0_init_normal_mode(&Timer0_Config);
    1410:	ce 01       	movw	r24, r28
    1412:	8f 56       	subi	r24, 0x6F	; 111
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <timer0_init_normal_mode>
    141a:	0b c0       	rjmp	.+22     	; 0x1432 <main+0x8ec>

					while(seconds != 10)
					{
						LCD_goToRowColumn(1,0);
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_goToRowColumn>
						LCD_intgerToString(seconds+1);
    1424:	80 91 66 01 	lds	r24, 0x0166
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	0e 94 0d 13 	call	0x261a	; 0x261a <LCD_intgerToString>
				if(state == CORRECT_PW)
				{
					LCD_displayStringRowColumn(0, 0, "OPENING DOOR 10s");
					timer0_init_normal_mode(&Timer0_Config);

					while(seconds != 10)
    1432:	80 91 66 01 	lds	r24, 0x0166
    1436:	8a 30       	cpi	r24, 0x0A	; 10
    1438:	89 f7       	brne	.-30     	; 0x141c <main+0x8d6>
					{
						LCD_goToRowColumn(1,0);
						LCD_intgerToString(seconds+1);
					}
					seconds = 0;
    143a:	10 92 66 01 	sts	0x0166, r1
					LCD_clearScreen();
    143e:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "CLOSING DOOR 10s");
    1442:	28 ee       	ldi	r18, 0xE8	; 232
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	a9 01       	movw	r20, r18
    144c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					timer0_init_normal_mode(&Timer0_Config);
    1450:	ce 01       	movw	r24, r28
    1452:	8f 56       	subi	r24, 0x6F	; 111
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <timer0_init_normal_mode>
    145a:	0b c0       	rjmp	.+22     	; 0x1472 <main+0x92c>
					while(seconds != 10)
					{
						LCD_goToRowColumn(1,0);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_goToRowColumn>
						LCD_intgerToString(seconds+1);
    1464:	80 91 66 01 	lds	r24, 0x0166
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	0e 94 0d 13 	call	0x261a	; 0x261a <LCD_intgerToString>
					}
					seconds = 0;
					LCD_clearScreen();
					LCD_displayStringRowColumn(0, 0, "CLOSING DOOR 10s");
					timer0_init_normal_mode(&Timer0_Config);
					while(seconds != 10)
    1472:	80 91 66 01 	lds	r24, 0x0166
    1476:	8a 30       	cpi	r24, 0x0A	; 10
    1478:	89 f7       	brne	.-30     	; 0x145c <main+0x916>
					{
						LCD_goToRowColumn(1,0);
						LCD_intgerToString(seconds+1);
					}
					LCD_clearScreen();
    147a:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
					wrongPW = 0;
    147e:	fe 01       	movw	r30, r28
    1480:	ee 58       	subi	r30, 0x8E	; 142
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	10 82       	st	Z, r1
					state = 0;
    1486:	fe 01       	movw	r30, r28
    1488:	ed 58       	subi	r30, 0x8D	; 141
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	10 82       	st	Z, r1
					screen = 0;
    148e:	fe 01       	movw	r30, r28
    1490:	ec 58       	subi	r30, 0x8C	; 140
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	10 82       	st	Z, r1
    1496:	83 cc       	rjmp	.-1786   	; 0xd9e <main+0x258>
				}
				else if(state == WRONG_PASSWORD)
    1498:	fe 01       	movw	r30, r28
    149a:	ed 58       	subi	r30, 0x8D	; 141
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	80 81       	ld	r24, Z
    14a0:	8c 30       	cpi	r24, 0x0C	; 12
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <main+0x960>
    14a4:	7c cc       	rjmp	.-1800   	; 0xd9e <main+0x258>
				{
					if(wrongPW != 3)
    14a6:	fe 01       	movw	r30, r28
    14a8:	ee 58       	subi	r30, 0x8E	; 142
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 81       	ld	r24, Z
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <main+0x96e>
    14b2:	79 c0       	rjmp	.+242    	; 0x15a6 <main+0xa60>
					{
					LCD_displayStringRowColumn(0, 0, "WRONG PW TRY AGAIN");
    14b4:	29 ef       	ldi	r18, 0xF9	; 249
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	aa ef       	ldi	r26, 0xFA	; 250
    14c8:	b4 e4       	ldi	r27, 0x44	; 68
    14ca:	8d ab       	std	Y+53, r24	; 0x35
    14cc:	9e ab       	std	Y+54, r25	; 0x36
    14ce:	af ab       	std	Y+55, r26	; 0x37
    14d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	6d a9       	ldd	r22, Y+53	; 0x35
    14d4:	7e a9       	ldd	r23, Y+54	; 0x36
    14d6:	8f a9       	ldd	r24, Y+55	; 0x37
    14d8:	98 ad       	ldd	r25, Y+56	; 0x38
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a ef       	ldi	r20, 0xFA	; 250
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	89 ab       	std	Y+49, r24	; 0x31
    14ec:	9a ab       	std	Y+50, r25	; 0x32
    14ee:	ab ab       	std	Y+51, r26	; 0x33
    14f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14f2:	69 a9       	ldd	r22, Y+49	; 0x31
    14f4:	7a a9       	ldd	r23, Y+50	; 0x32
    14f6:	8b a9       	ldd	r24, Y+51	; 0x33
    14f8:	9c a9       	ldd	r25, Y+52	; 0x34
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1506:	88 23       	and	r24, r24
    1508:	2c f4       	brge	.+10     	; 0x1514 <main+0x9ce>
		__ticks = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	98 ab       	std	Y+48, r25	; 0x30
    1510:	8f a7       	std	Y+47, r24	; 0x2f
    1512:	3f c0       	rjmp	.+126    	; 0x1592 <main+0xa4c>
	else if (__tmp > 65535)
    1514:	69 a9       	ldd	r22, Y+49	; 0x31
    1516:	7a a9       	ldd	r23, Y+50	; 0x32
    1518:	8b a9       	ldd	r24, Y+51	; 0x33
    151a:	9c a9       	ldd	r25, Y+52	; 0x34
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	4c f5       	brge	.+82     	; 0x157e <main+0xa38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	6d a9       	ldd	r22, Y+53	; 0x35
    152e:	7e a9       	ldd	r23, Y+54	; 0x36
    1530:	8f a9       	ldd	r24, Y+55	; 0x37
    1532:	98 ad       	ldd	r25, Y+56	; 0x38
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	98 ab       	std	Y+48, r25	; 0x30
    1552:	8f a7       	std	Y+47, r24	; 0x2f
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <main+0xa2e>
    1556:	88 ec       	ldi	r24, 0xC8	; 200
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9e a7       	std	Y+46, r25	; 0x2e
    155c:	8d a7       	std	Y+45, r24	; 0x2d
    155e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1560:	9e a5       	ldd	r25, Y+46	; 0x2e
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <main+0xa1c>
    1566:	9e a7       	std	Y+46, r25	; 0x2e
    1568:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	8f a5       	ldd	r24, Y+47	; 0x2f
    156c:	98 a9       	ldd	r25, Y+48	; 0x30
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	98 ab       	std	Y+48, r25	; 0x30
    1572:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	8f a5       	ldd	r24, Y+47	; 0x2f
    1576:	98 a9       	ldd	r25, Y+48	; 0x30
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f7       	brne	.-38     	; 0x1556 <main+0xa10>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <main+0xa60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157e:	69 a9       	ldd	r22, Y+49	; 0x31
    1580:	7a a9       	ldd	r23, Y+50	; 0x32
    1582:	8b a9       	ldd	r24, Y+51	; 0x33
    1584:	9c a9       	ldd	r25, Y+52	; 0x34
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	98 ab       	std	Y+48, r25	; 0x30
    1590:	8f a7       	std	Y+47, r24	; 0x2f
    1592:	8f a5       	ldd	r24, Y+47	; 0x2f
    1594:	98 a9       	ldd	r25, Y+48	; 0x30
    1596:	9c a7       	std	Y+44, r25	; 0x2c
    1598:	8b a7       	std	Y+43, r24	; 0x2b
    159a:	8b a5       	ldd	r24, Y+43	; 0x2b
    159c:	9c a5       	ldd	r25, Y+44	; 0x2c
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <main+0xa58>
    15a2:	9c a7       	std	Y+44, r25	; 0x2c
    15a4:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(2000);
					}
					wrongPW++;
    15a6:	de 01       	movw	r26, r28
    15a8:	ae 58       	subi	r26, 0x8E	; 142
    15aa:	bf 4f       	sbci	r27, 0xFF	; 255
    15ac:	fe 01       	movw	r30, r28
    15ae:	ee 58       	subi	r30, 0x8E	; 142
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	8c 93       	st	X, r24
					screen = 0;
    15b8:	fe 01       	movw	r30, r28
    15ba:	ec 58       	subi	r30, 0x8C	; 140
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	10 82       	st	Z, r1
					state  = 0;
    15c0:	fe 01       	movw	r30, r28
    15c2:	ed 58       	subi	r30, 0x8D	; 141
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	10 82       	st	Z, r1
					if(wrongPW == 3)
    15c8:	fe 01       	movw	r30, r28
    15ca:	ee 58       	subi	r30, 0x8E	; 142
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 81       	ld	r24, Z
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <main+0xa90>
    15d4:	e4 cb       	rjmp	.-2104   	; 0xd9e <main+0x258>
					{
						LCD_displayStringRowColumn(0, 0, " ALARM !!!      ");
    15d6:	2c e0       	ldi	r18, 0x0C	; 12
    15d8:	31 e0       	ldi	r19, 0x01	; 1
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	a9 01       	movw	r20, r18
    15e0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
						timer0_init_normal_mode(&Timer0_Config);
    15e4:	ce 01       	movw	r24, r28
    15e6:	8f 56       	subi	r24, 0x6F	; 111
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <timer0_init_normal_mode>
						while(seconds != 10);
    15ee:	80 91 66 01 	lds	r24, 0x0166
    15f2:	8a 30       	cpi	r24, 0x0A	; 10
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <main+0xaa8>
						wrongPW = 0;
    15f6:	fe 01       	movw	r30, r28
    15f8:	ee 58       	subi	r30, 0x8E	; 142
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	10 82       	st	Z, r1
						screen = 0;
    15fe:	fe 01       	movw	r30, r28
    1600:	ec 58       	subi	r30, 0x8C	; 140
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	10 82       	st	Z, r1
						state  = 0;
    1606:	fe 01       	movw	r30, r28
    1608:	ed 58       	subi	r30, 0x8D	; 141
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	10 82       	st	Z, r1
    160e:	c7 cb       	rjmp	.-2162   	; 0xd9e <main+0x258>
					}

				}
			}
			else if(screen == 2)
    1610:	fe 01       	movw	r30, r28
    1612:	ec 58       	subi	r30, 0x8C	; 140
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 81       	ld	r24, Z
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	09 f0       	breq	.+2      	; 0x161e <main+0xad8>
    161c:	c0 cb       	rjmp	.-2176   	; 0xd9e <main+0x258>
			{
				state = UART_recieveByte();
    161e:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_recieveByte>
    1622:	fe 01       	movw	r30, r28
    1624:	ed 58       	subi	r30, 0x8D	; 141
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 83       	st	Z, r24
				LCD_clearScreen();
    162a:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
				if (state == CORRECT_PW)
    162e:	fe 01       	movw	r30, r28
    1630:	ed 58       	subi	r30, 0x8D	; 141
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	8f 30       	cpi	r24, 0x0F	; 15
    1638:	09 f0       	breq	.+2      	; 0x163c <main+0xaf6>
    163a:	5b c1       	rjmp	.+694    	; 0x18f2 <main+0xdac>
				{


					LCD_displayStringRowColumn(0, 0,"Enter 4-digit PW      ");
    163c:	2d e1       	ldi	r18, 0x1D	; 29
    163e:	31 e0       	ldi	r19, 0x01	; 1
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					getPassword(a_firstPassword);
    164a:	ce 01       	movw	r24, r28
    164c:	88 58       	subi	r24, 0x88	; 136
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	0e 94 3a 13 	call	0x2674	; 0x2674 <getPassword>
					LCD_clearScreen();
    1654:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Reenter 4-digit PW");
    1658:	24 e3       	ldi	r18, 0x34	; 52
    165a:	31 e0       	ldi	r19, 0x01	; 1
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
					getPassword(a_secondPassword);
    1666:	ce 01       	movw	r24, r28
    1668:	83 58       	subi	r24, 0x83	; 131
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	0e 94 3a 13 	call	0x2674	; 0x2674 <getPassword>
					compare = strcmp(a_firstPassword ,a_secondPassword );
    1670:	ce 01       	movw	r24, r28
    1672:	88 58       	subi	r24, 0x88	; 136
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	9e 01       	movw	r18, r28
    1678:	23 58       	subi	r18, 0x83	; 131
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	b9 01       	movw	r22, r18
    167e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <strcmp>
    1682:	fe 01       	movw	r30, r28
    1684:	e9 58       	subi	r30, 0x89	; 137
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 83       	st	Z, r24
					if(compare == 0)
    168a:	fe 01       	movw	r30, r28
    168c:	e9 58       	subi	r30, 0x89	; 137
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	88 23       	and	r24, r24
    1694:	09 f0       	breq	.+2      	; 0x1698 <main+0xb52>
    1696:	9c c0       	rjmp	.+312    	; 0x17d0 <main+0xc8a>
					{
						LCD_clearScreen();
    1698:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "password");
    169c:	25 e8       	ldi	r18, 0x85	; 133
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "Match");
    16aa:	2e e8       	ldi	r18, 0x8E	; 142
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	a9 01       	movw	r20, r18
    16b4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	aa e7       	ldi	r26, 0x7A	; 122
    16be:	b4 e4       	ldi	r27, 0x44	; 68
    16c0:	8f a3       	std	Y+39, r24	; 0x27
    16c2:	98 a7       	std	Y+40, r25	; 0x28
    16c4:	a9 a7       	std	Y+41, r26	; 0x29
    16c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c8:	6f a1       	ldd	r22, Y+39	; 0x27
    16ca:	78 a5       	ldd	r23, Y+40	; 0x28
    16cc:	89 a5       	ldd	r24, Y+41	; 0x29
    16ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4a ef       	ldi	r20, 0xFA	; 250
    16d6:	54 e4       	ldi	r21, 0x44	; 68
    16d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	8b a3       	std	Y+35, r24	; 0x23
    16e2:	9c a3       	std	Y+36, r25	; 0x24
    16e4:	ad a3       	std	Y+37, r26	; 0x25
    16e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16e8:	6b a1       	ldd	r22, Y+35	; 0x23
    16ea:	7c a1       	ldd	r23, Y+36	; 0x24
    16ec:	8d a1       	ldd	r24, Y+37	; 0x25
    16ee:	9e a1       	ldd	r25, Y+38	; 0x26
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	2c f4       	brge	.+10     	; 0x170a <main+0xbc4>
		__ticks = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9a a3       	std	Y+34, r25	; 0x22
    1706:	89 a3       	std	Y+33, r24	; 0x21
    1708:	3f c0       	rjmp	.+126    	; 0x1788 <main+0xc42>
	else if (__tmp > 65535)
    170a:	6b a1       	ldd	r22, Y+35	; 0x23
    170c:	7c a1       	ldd	r23, Y+36	; 0x24
    170e:	8d a1       	ldd	r24, Y+37	; 0x25
    1710:	9e a1       	ldd	r25, Y+38	; 0x26
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	57 e4       	ldi	r21, 0x47	; 71
    171a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171e:	18 16       	cp	r1, r24
    1720:	4c f5       	brge	.+82     	; 0x1774 <main+0xc2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1722:	6f a1       	ldd	r22, Y+39	; 0x27
    1724:	78 a5       	ldd	r23, Y+40	; 0x28
    1726:	89 a5       	ldd	r24, Y+41	; 0x29
    1728:	9a a5       	ldd	r25, Y+42	; 0x2a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9a a3       	std	Y+34, r25	; 0x22
    1748:	89 a3       	std	Y+33, r24	; 0x21
    174a:	0f c0       	rjmp	.+30     	; 0x176a <main+0xc24>
    174c:	88 ec       	ldi	r24, 0xC8	; 200
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	98 a3       	std	Y+32, r25	; 0x20
    1752:	8f 8f       	std	Y+31, r24	; 0x1f
    1754:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1756:	98 a1       	ldd	r25, Y+32	; 0x20
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <main+0xc12>
    175c:	98 a3       	std	Y+32, r25	; 0x20
    175e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1760:	89 a1       	ldd	r24, Y+33	; 0x21
    1762:	9a a1       	ldd	r25, Y+34	; 0x22
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	9a a3       	std	Y+34, r25	; 0x22
    1768:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176a:	89 a1       	ldd	r24, Y+33	; 0x21
    176c:	9a a1       	ldd	r25, Y+34	; 0x22
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	69 f7       	brne	.-38     	; 0x174c <main+0xc06>
    1772:	14 c0       	rjmp	.+40     	; 0x179c <main+0xc56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1774:	6b a1       	ldd	r22, Y+35	; 0x23
    1776:	7c a1       	ldd	r23, Y+36	; 0x24
    1778:	8d a1       	ldd	r24, Y+37	; 0x25
    177a:	9e a1       	ldd	r25, Y+38	; 0x26
    177c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	9a a3       	std	Y+34, r25	; 0x22
    1786:	89 a3       	std	Y+33, r24	; 0x21
    1788:	89 a1       	ldd	r24, Y+33	; 0x21
    178a:	9a a1       	ldd	r25, Y+34	; 0x22
    178c:	9e 8f       	std	Y+30, r25	; 0x1e
    178e:	8d 8f       	std	Y+29, r24	; 0x1d
    1790:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1792:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <main+0xc4e>
    1798:	9e 8f       	std	Y+30, r25	; 0x1e
    179a:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						readyToSend(a_firstPassword , a_message);
    179c:	ce 01       	movw	r24, r28
    179e:	88 58       	subi	r24, 0x88	; 136
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	9e 01       	movw	r18, r28
    17a4:	2e 57       	subi	r18, 0x7E	; 126
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	b9 01       	movw	r22, r18
    17aa:	0e 94 0e 14 	call	0x281c	; 0x281c <readyToSend>
						UART_sendByte(NEW_PASSWORD);
    17ae:	80 e1       	ldi	r24, 0x10	; 16
    17b0:	0e 94 a6 14 	call	0x294c	; 0x294c <UART_sendByte>
						UART_sendString(a_message);
    17b4:	ce 01       	movw	r24, r28
    17b6:	8e 57       	subi	r24, 0x7E	; 126
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	0e 94 cc 14 	call	0x2998	; 0x2998 <UART_sendString>
						screen = 0;
    17be:	fe 01       	movw	r30, r28
    17c0:	ec 58       	subi	r30, 0x8C	; 140
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	10 82       	st	Z, r1
						state  = 0;
    17c6:	fe 01       	movw	r30, r28
    17c8:	ed 58       	subi	r30, 0x8D	; 141
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	10 82       	st	Z, r1
    17ce:	8c c0       	rjmp	.+280    	; 0x18e8 <main+0xda2>
					}
					else
					{
						LCD_clearScreen();
    17d0:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "password");
    17d4:	25 e8       	ldi	r18, 0x85	; 133
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	a9 01       	movw	r20, r18
    17de:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, " don't Match");
    17e2:	24 e9       	ldi	r18, 0x94	; 148
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	a9 01       	movw	r20, r18
    17ec:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	aa e7       	ldi	r26, 0x7A	; 122
    17f6:	b4 e4       	ldi	r27, 0x44	; 68
    17f8:	89 8f       	std	Y+25, r24	; 0x19
    17fa:	9a 8f       	std	Y+26, r25	; 0x1a
    17fc:	ab 8f       	std	Y+27, r26	; 0x1b
    17fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	69 8d       	ldd	r22, Y+25	; 0x19
    1802:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1804:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1806:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8d 8b       	std	Y+21, r24	; 0x15
    181a:	9e 8b       	std	Y+22, r25	; 0x16
    181c:	af 8b       	std	Y+23, r26	; 0x17
    181e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	2c f4       	brge	.+10     	; 0x1842 <main+0xcfc>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	8b 8b       	std	Y+19, r24	; 0x13
    1840:	3f c0       	rjmp	.+126    	; 0x18c0 <main+0xd7a>
	else if (__tmp > 65535)
    1842:	6d 89       	ldd	r22, Y+21	; 0x15
    1844:	7e 89       	ldd	r23, Y+22	; 0x16
    1846:	8f 89       	ldd	r24, Y+23	; 0x17
    1848:	98 8d       	ldd	r25, Y+24	; 0x18
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	4c f5       	brge	.+82     	; 0x18ac <main+0xd66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	69 8d       	ldd	r22, Y+25	; 0x19
    185c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1860:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9c 8b       	std	Y+20, r25	; 0x14
    1880:	8b 8b       	std	Y+19, r24	; 0x13
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <main+0xd5c>
    1884:	88 ec       	ldi	r24, 0xC8	; 200
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9a 8b       	std	Y+18, r25	; 0x12
    188a:	89 8b       	std	Y+17, r24	; 0x11
    188c:	89 89       	ldd	r24, Y+17	; 0x11
    188e:	9a 89       	ldd	r25, Y+18	; 0x12
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <main+0xd4a>
    1894:	9a 8b       	std	Y+18, r25	; 0x12
    1896:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	8b 89       	ldd	r24, Y+19	; 0x13
    189a:	9c 89       	ldd	r25, Y+20	; 0x14
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a2:	8b 89       	ldd	r24, Y+19	; 0x13
    18a4:	9c 89       	ldd	r25, Y+20	; 0x14
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f7       	brne	.-38     	; 0x1884 <main+0xd3e>
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4 <main+0xd8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	6d 89       	ldd	r22, Y+21	; 0x15
    18ae:	7e 89       	ldd	r23, Y+22	; 0x16
    18b0:	8f 89       	ldd	r24, Y+23	; 0x17
    18b2:	98 8d       	ldd	r25, Y+24	; 0x18
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
    18c0:	8b 89       	ldd	r24, Y+19	; 0x13
    18c2:	9c 89       	ldd	r25, Y+20	; 0x14
    18c4:	98 8b       	std	Y+16, r25	; 0x10
    18c6:	8f 87       	std	Y+15, r24	; 0x0f
    18c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ca:	98 89       	ldd	r25, Y+16	; 0x10
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <main+0xd86>
    18d0:	98 8b       	std	Y+16, r25	; 0x10
    18d2:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						UART_sendByte(NEW_PASSWORD);
    18d4:	80 e1       	ldi	r24, 0x10	; 16
    18d6:	0e 94 a6 14 	call	0x294c	; 0x294c <UART_sendByte>
						UART_sendString(a_oldPassMess);
    18da:	ce 01       	movw	r24, r28
    18dc:	84 57       	subi	r24, 0x74	; 116
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	0e 94 cc 14 	call	0x2998	; 0x2998 <UART_sendString>
						LCD_clearScreen();
    18e4:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_clearScreen>

					}
					screen = 0;
    18e8:	fe 01       	movw	r30, r28
    18ea:	ec 58       	subi	r30, 0x8C	; 140
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	10 82       	st	Z, r1
    18f0:	56 ca       	rjmp	.-2900   	; 0xd9e <main+0x258>
				}
				else if (state == WRONG_PASSWORD)
    18f2:	fe 01       	movw	r30, r28
    18f4:	ed 58       	subi	r30, 0x8D	; 141
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 81       	ld	r24, Z
    18fa:	8c 30       	cpi	r24, 0x0C	; 12
    18fc:	09 f0       	breq	.+2      	; 0x1900 <main+0xdba>
    18fe:	4f ca       	rjmp	.-2914   	; 0xd9e <main+0x258>
				{

					LCD_displayStringRowColumn(0, 0, "WRONG PW TRY AGAIN");
    1900:	29 ef       	ldi	r18, 0xF9	; 249
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	aa ef       	ldi	r26, 0xFA	; 250
    1914:	b4 e4       	ldi	r27, 0x44	; 68
    1916:	8b 87       	std	Y+11, r24	; 0x0b
    1918:	9c 87       	std	Y+12, r25	; 0x0c
    191a:	ad 87       	std	Y+13, r26	; 0x0d
    191c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1920:	7c 85       	ldd	r23, Y+12	; 0x0c
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	4a ef       	ldi	r20, 0xFA	; 250
    192c:	54 e4       	ldi	r21, 0x44	; 68
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	8f 83       	std	Y+7, r24	; 0x07
    1938:	98 87       	std	Y+8, r25	; 0x08
    193a:	a9 87       	std	Y+9, r26	; 0x09
    193c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    193e:	6f 81       	ldd	r22, Y+7	; 0x07
    1940:	78 85       	ldd	r23, Y+8	; 0x08
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1952:	88 23       	and	r24, r24
    1954:	2c f4       	brge	.+10     	; 0x1960 <main+0xe1a>
		__ticks = 1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	3f c0       	rjmp	.+126    	; 0x19de <main+0xe98>
	else if (__tmp > 65535)
    1960:	6f 81       	ldd	r22, Y+7	; 0x07
    1962:	78 85       	ldd	r23, Y+8	; 0x08
    1964:	89 85       	ldd	r24, Y+9	; 0x09
    1966:	9a 85       	ldd	r25, Y+10	; 0x0a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	3f ef       	ldi	r19, 0xFF	; 255
    196c:	4f e7       	ldi	r20, 0x7F	; 127
    196e:	57 e4       	ldi	r21, 0x47	; 71
    1970:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1974:	18 16       	cp	r1, r24
    1976:	4c f5       	brge	.+82     	; 0x19ca <main+0xe84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1978:	6b 85       	ldd	r22, Y+11	; 0x0b
    197a:	7c 85       	ldd	r23, Y+12	; 0x0c
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e2       	ldi	r20, 0x20	; 32
    1986:	51 e4       	ldi	r21, 0x41	; 65
    1988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <main+0xe7a>
    19a2:	88 ec       	ldi	r24, 0xC8	; 200
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	9c 83       	std	Y+4, r25	; 0x04
    19a8:	8b 83       	std	Y+3, r24	; 0x03
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <main+0xe68>
    19b2:	9c 83       	std	Y+4, r25	; 0x04
    19b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	69 f7       	brne	.-38     	; 0x19a2 <main+0xe5c>
    19c8:	14 c0       	rjmp	.+40     	; 0x19f2 <main+0xeac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <main+0xea4>
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);
					wrongPW++;
    19f2:	de 01       	movw	r26, r28
    19f4:	ae 58       	subi	r26, 0x8E	; 142
    19f6:	bf 4f       	sbci	r27, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	ee 58       	subi	r30, 0x8E	; 142
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	8c 93       	st	X, r24
					screen = 0;
    1a04:	fe 01       	movw	r30, r28
    1a06:	ec 58       	subi	r30, 0x8C	; 140
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	10 82       	st	Z, r1
					state  = 0;
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ed 58       	subi	r30, 0x8D	; 141
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	10 82       	st	Z, r1
					if(wrongPW == 3)
    1a14:	fe 01       	movw	r30, r28
    1a16:	ee 58       	subi	r30, 0x8E	; 142
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <main+0xedc>
    1a20:	be c9       	rjmp	.-3204   	; 0xd9e <main+0x258>
					{
						LCD_displayStringRowColumn(0, 0, " ALARM !!!      ");
    1a22:	2c e0       	ldi	r18, 0x0C	; 12
    1a24:	31 e0       	ldi	r19, 0x01	; 1
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	a9 01       	movw	r20, r18
    1a2c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
						timer0_init_normal_mode(&Timer0_Config);
    1a30:	ce 01       	movw	r24, r28
    1a32:	8f 56       	subi	r24, 0x6F	; 111
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <timer0_init_normal_mode>
						while(seconds != 10);
    1a3a:	80 91 66 01 	lds	r24, 0x0166
    1a3e:	8a 30       	cpi	r24, 0x0A	; 10
    1a40:	e1 f7       	brne	.-8      	; 0x1a3a <main+0xef4>
						wrongPW = 0;
    1a42:	fe 01       	movw	r30, r28
    1a44:	ee 58       	subi	r30, 0x8E	; 142
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	10 82       	st	Z, r1
						screen = 0;
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	ec 58       	subi	r30, 0x8C	; 140
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	10 82       	st	Z, r1
						state  = 0;
    1a52:	fe 01       	movw	r30, r28
    1a54:	ed 58       	subi	r30, 0x8D	; 141
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	10 82       	st	Z, r1
    1a5a:	a1 c9       	rjmp	.-3262   	; 0xd9e <main+0x258>

00001a5c <__vector_9>:
/************************************** interrupt Routine Service *****************************
 *
 ********************************************************************************************/
// every 144 interrupt will happen it will be one second
ISR(TIMER0_OVF_vect)
{
    1a5c:	1f 92       	push	r1
    1a5e:	0f 92       	push	r0
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	0f 92       	push	r0
    1a64:	11 24       	eor	r1, r1
    1a66:	8f 93       	push	r24
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1a70:	80 91 65 01 	lds	r24, 0x0165
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	80 93 65 01 	sts	0x0165, r24
	if(g_tick == NUMBER_OF_OVS_PER_SECOND)
    1a7a:	80 91 65 01 	lds	r24, 0x0165
    1a7e:	80 39       	cpi	r24, 0x90	; 144
    1a80:	39 f4       	brne	.+14     	; 0x1a90 <__vector_9+0x34>
	{
		seconds++;
    1a82:	80 91 66 01 	lds	r24, 0x0166
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	80 93 66 01 	sts	0x0166, r24
		g_tick = 0;
    1a8c:	10 92 65 01 	sts	0x0165, r1
	}
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	8f 91       	pop	r24
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	1f 90       	pop	r1
    1a9e:	18 95       	reti

00001aa0 <timer0_init_normal_mode>:
 * For clock=8Mhz and prescale F_CPU/256 every count will take 32micro second
 * so put initial timer counter = 0  0 --> 255 (8.192ms per overflow)
 * so we need timer to overflow 144 times to count 1 second
 */
void timer0_init_normal_mode(Timer0_ConfigType *Config_Ptr)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <timer0_init_normal_mode+0x6>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer initial value to 0
    1aae:	e2 e5       	ldi	r30, 0x52	; 82
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	10 82       	st	Z, r1
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    1ab4:	a9 e5       	ldi	r26, 0x59	; 89
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e9 e5       	ldi	r30, 0x59	; 89
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	8c 93       	st	X, r24
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 	  configurable Cock
	 */

	TCCR0 = (1<<FOC0) ;
    1ac2:	e3 e5       	ldi	r30, 0x53	; 83
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 e8       	ldi	r24, 0x80	; 128
    1ac8:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    1aca:	a3 e5       	ldi	r26, 0x53	; 83
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e3 e5       	ldi	r30, 0x53	; 83
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	98 2f       	mov	r25, r24
    1ad6:	98 7f       	andi	r25, 0xF8	; 248
    1ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ada:	fa 81       	ldd	r31, Y+2	; 0x02
    1adc:	80 81       	ld	r24, Z
    1ade:	89 2b       	or	r24, r25
    1ae0:	8c 93       	st	X, r24
	seconds = 0;			// every time Timer0 initialize seconds will be zero
    1ae2:	10 92 66 01 	sts	0x0166, r1
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <KeyPad_getPressedKey+0x6>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1afa:	1a 82       	std	Y+2, r1	; 0x02
    1afc:	4c c0       	rjmp	.+152    	; 0x1b96 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1afe:	ea e3       	ldi	r30, 0x3A	; 58
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	80 e1       	ldi	r24, 0x10	; 16
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <KeyPad_getPressedKey+0x22>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	2a 95       	dec	r18
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <KeyPad_getPressedKey+0x1e>
    1b16:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1b18:	eb e3       	ldi	r30, 0x3B	; 59
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	80 e1       	ldi	r24, 0x10	; 16
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <KeyPad_getPressedKey+0x3e>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <KeyPad_getPressedKey+0x3a>
    1b32:	80 95       	com	r24
    1b34:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1b36:	19 82       	std	Y+1, r1	; 0x01
    1b38:	28 c0       	rjmp	.+80     	; 0x1b8a <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1b3a:	e9 e3       	ldi	r30, 0x39	; 57
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <KeyPad_getPressedKey+0x62>
    1b4e:	55 95       	asr	r21
    1b50:	47 95       	ror	r20
    1b52:	8a 95       	dec	r24
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <KeyPad_getPressedKey+0x5e>
    1b56:	ca 01       	movw	r24, r20
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	91 f4       	brne	.+36     	; 0x1b84 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	98 2f       	mov	r25, r24
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	89 0f       	add	r24, r25
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	84 30       	cpi	r24, 0x04	; 4
    1b8e:	a8 f2       	brcs	.-86     	; 0x1b3a <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	8a 83       	std	Y+2, r24	; 0x02
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	84 30       	cpi	r24, 0x04	; 4
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <KeyPad_getPressedKey+0xae>
    1b9c:	b0 cf       	rjmp	.-160    	; 0x1afe <KeyPad_getPressedKey+0xe>
    1b9e:	ad cf       	rjmp	.-166    	; 0x1afa <KeyPad_getPressedKey+0xa>

00001ba0 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <KeyPad_4x4_adjustKeyNumber+0x6>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <KeyPad_4x4_adjustKeyNumber+0x8>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3c 83       	std	Y+4, r19	; 0x04
    1bb6:	2b 83       	std	Y+3, r18	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	88 30       	cpi	r24, 0x08	; 8
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <KeyPad_4x4_adjustKeyNumber+0x24>
    1bc2:	70 c0       	rjmp	.+224    	; 0x1ca4 <KeyPad_4x4_adjustKeyNumber+0x104>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	29 30       	cpi	r18, 0x09	; 9
    1bca:	31 05       	cpc	r19, r1
    1bcc:	5c f5       	brge	.+86     	; 0x1c24 <KeyPad_4x4_adjustKeyNumber+0x84>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	84 30       	cpi	r24, 0x04	; 4
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <KeyPad_4x4_adjustKeyNumber+0x3a>
    1bd8:	59 c0       	rjmp	.+178    	; 0x1c8c <KeyPad_4x4_adjustKeyNumber+0xec>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	25 30       	cpi	r18, 0x05	; 5
    1be0:	31 05       	cpc	r19, r1
    1be2:	9c f4       	brge	.+38     	; 0x1c0a <KeyPad_4x4_adjustKeyNumber+0x6a>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	91 05       	cpc	r25, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <KeyPad_4x4_adjustKeyNumber+0x50>
    1bee:	48 c0       	rjmp	.+144    	; 0x1c80 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf4:	23 30       	cpi	r18, 0x03	; 3
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	0c f0       	brlt	.+2      	; 0x1bfc <KeyPad_4x4_adjustKeyNumber+0x5c>
    1bfa:	45 c0       	rjmp	.+138    	; 0x1c86 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	91 05       	cpc	r25, r1
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <KeyPad_4x4_adjustKeyNumber+0x68>
    1c06:	39 c0       	rjmp	.+114    	; 0x1c7a <KeyPad_4x4_adjustKeyNumber+0xda>
    1c08:	67 c0       	rjmp	.+206    	; 0x1cd8 <KeyPad_4x4_adjustKeyNumber+0x138>
    1c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0e:	26 30       	cpi	r18, 0x06	; 6
    1c10:	31 05       	cpc	r19, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <KeyPad_4x4_adjustKeyNumber+0x76>
    1c14:	41 c0       	rjmp	.+130    	; 0x1c98 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	87 30       	cpi	r24, 0x07	; 7
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	0c f0       	brlt	.+2      	; 0x1c22 <KeyPad_4x4_adjustKeyNumber+0x82>
    1c20:	3e c0       	rjmp	.+124    	; 0x1c9e <KeyPad_4x4_adjustKeyNumber+0xfe>
    1c22:	37 c0       	rjmp	.+110    	; 0x1c92 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	2c 30       	cpi	r18, 0x0C	; 12
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <KeyPad_4x4_adjustKeyNumber+0x90>
    1c2e:	46 c0       	rjmp	.+140    	; 0x1cbc <KeyPad_4x4_adjustKeyNumber+0x11c>
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	8d 30       	cpi	r24, 0x0D	; 13
    1c36:	91 05       	cpc	r25, r1
    1c38:	5c f4       	brge	.+22     	; 0x1c50 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3e:	2a 30       	cpi	r18, 0x0A	; 10
    1c40:	31 05       	cpc	r19, r1
    1c42:	b1 f1       	breq	.+108    	; 0x1cb0 <KeyPad_4x4_adjustKeyNumber+0x110>
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	8b 30       	cpi	r24, 0x0B	; 11
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	a4 f5       	brge	.+104    	; 0x1cb6 <KeyPad_4x4_adjustKeyNumber+0x116>
    1c4e:	2d c0       	rjmp	.+90     	; 0x1caa <KeyPad_4x4_adjustKeyNumber+0x10a>
    1c50:	2b 81       	ldd	r18, Y+3	; 0x03
    1c52:	3c 81       	ldd	r19, Y+4	; 0x04
    1c54:	2e 30       	cpi	r18, 0x0E	; 14
    1c56:	31 05       	cpc	r19, r1
    1c58:	b9 f1       	breq	.+110    	; 0x1cc8 <KeyPad_4x4_adjustKeyNumber+0x128>
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	8e 30       	cpi	r24, 0x0E	; 14
    1c60:	91 05       	cpc	r25, r1
    1c62:	7c f1       	brlt	.+94     	; 0x1cc2 <KeyPad_4x4_adjustKeyNumber+0x122>
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	2f 30       	cpi	r18, 0x0F	; 15
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	79 f1       	breq	.+94     	; 0x1ccc <KeyPad_4x4_adjustKeyNumber+0x12c>
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	80 31       	cpi	r24, 0x10	; 16
    1c74:	91 05       	cpc	r25, r1
    1c76:	69 f1       	breq	.+90     	; 0x1cd2 <KeyPad_4x4_adjustKeyNumber+0x132>
    1c78:	2f c0       	rjmp	.+94     	; 0x1cd8 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1c7a:	97 e0       	ldi	r25, 0x07	; 7
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	2e c0       	rjmp	.+92     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1c80:	28 e0       	ldi	r18, 0x08	; 8
    1c82:	2a 83       	std	Y+2, r18	; 0x02
    1c84:	2b c0       	rjmp	.+86     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1c86:	39 e0       	ldi	r19, 0x09	; 9
    1c88:	3a 83       	std	Y+2, r19	; 0x02
    1c8a:	28 c0       	rjmp	.+80     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1c8c:	85 e2       	ldi	r24, 0x25	; 37
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	25 c0       	rjmp	.+74     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1c92:	94 e0       	ldi	r25, 0x04	; 4
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	22 c0       	rjmp	.+68     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1c98:	25 e0       	ldi	r18, 0x05	; 5
    1c9a:	2a 83       	std	Y+2, r18	; 0x02
    1c9c:	1f c0       	rjmp	.+62     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1c9e:	36 e0       	ldi	r19, 0x06	; 6
    1ca0:	3a 83       	std	Y+2, r19	; 0x02
    1ca2:	1c c0       	rjmp	.+56     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1ca4:	8a e2       	ldi	r24, 0x2A	; 42
    1ca6:	8a 83       	std	Y+2, r24	; 0x02
    1ca8:	19 c0       	rjmp	.+50     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	16 c0       	rjmp	.+44     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1cb0:	22 e0       	ldi	r18, 0x02	; 2
    1cb2:	2a 83       	std	Y+2, r18	; 0x02
    1cb4:	13 c0       	rjmp	.+38     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1cb6:	33 e0       	ldi	r19, 0x03	; 3
    1cb8:	3a 83       	std	Y+2, r19	; 0x02
    1cba:	10 c0       	rjmp	.+32     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1cbc:	8d e2       	ldi	r24, 0x2D	; 45
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	0d c0       	rjmp	.+26     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1cc2:	9d e0       	ldi	r25, 0x0D	; 13
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	0a c0       	rjmp	.+20     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1cc8:	1a 82       	std	Y+2, r1	; 0x02
    1cca:	08 c0       	rjmp	.+16     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1ccc:	2d e3       	ldi	r18, 0x3D	; 61
    1cce:	2a 83       	std	Y+2, r18	; 0x02
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1cd2:	3b e2       	ldi	r19, 0x2B	; 43
    1cd4:	3a 83       	std	Y+2, r19	; 0x02
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	8a 83       	std	Y+2, r24	; 0x02
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1cf4:	e4 e3       	ldi	r30, 0x34	; 52
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1cfc:	a1 e3       	ldi	r26, 0x31	; 49
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e1 e3       	ldi	r30, 0x31	; 49
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	80 67       	ori	r24, 0x70	; 112
    1d08:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1d0a:	88 e3       	ldi	r24, 0x38	; 56
    1d0c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1d10:	8c e0       	ldi	r24, 0x0C	; 12
    1d12:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_sendCommand>
}
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	e9 97       	sbiw	r28, 0x39	; 57
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1d38:	a2 e3       	ldi	r26, 0x32	; 50
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e2 e3       	ldi	r30, 0x32	; 50
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 7e       	andi	r24, 0xEF	; 239
    1d44:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1d46:	a2 e3       	ldi	r26, 0x32	; 50
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e2 e3       	ldi	r30, 0x32	; 50
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8f 7d       	andi	r24, 0xDF	; 223
    1d52:	8c 93       	st	X, r24
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e8       	ldi	r26, 0x80	; 128
    1d5a:	bf e3       	ldi	r27, 0x3F	; 63
    1d5c:	8d ab       	std	Y+53, r24	; 0x35
    1d5e:	9e ab       	std	Y+54, r25	; 0x36
    1d60:	af ab       	std	Y+55, r26	; 0x37
    1d62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6d a9       	ldd	r22, Y+53	; 0x35
    1d66:	7e a9       	ldd	r23, Y+54	; 0x36
    1d68:	8f a9       	ldd	r24, Y+55	; 0x37
    1d6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	89 ab       	std	Y+49, r24	; 0x31
    1d7e:	9a ab       	std	Y+50, r25	; 0x32
    1d80:	ab ab       	std	Y+51, r26	; 0x33
    1d82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d84:	69 a9       	ldd	r22, Y+49	; 0x31
    1d86:	7a a9       	ldd	r23, Y+50	; 0x32
    1d88:	8b a9       	ldd	r24, Y+51	; 0x33
    1d8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_sendCommand+0x84>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	98 ab       	std	Y+48, r25	; 0x30
    1da2:	8f a7       	std	Y+47, r24	; 0x2f
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1da6:	69 a9       	ldd	r22, Y+49	; 0x31
    1da8:	7a a9       	ldd	r23, Y+50	; 0x32
    1daa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dac:	9c a9       	ldd	r25, Y+52	; 0x34
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	98 ab       	std	Y+48, r25	; 0x30
    1de4:	8f a7       	std	Y+47, r24	; 0x2f
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_sendCommand+0xe4>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9e a7       	std	Y+46, r25	; 0x2e
    1dee:	8d a7       	std	Y+45, r24	; 0x2d
    1df0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1df2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_sendCommand+0xd2>
    1df8:	9e a7       	std	Y+46, r25	; 0x2e
    1dfa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	98 ab       	std	Y+48, r25	; 0x30
    1e04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e08:	98 a9       	ldd	r25, Y+48	; 0x30
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_sendCommand+0xc6>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	69 a9       	ldd	r22, Y+49	; 0x31
    1e12:	7a a9       	ldd	r23, Y+50	; 0x32
    1e14:	8b a9       	ldd	r24, Y+51	; 0x33
    1e16:	9c a9       	ldd	r25, Y+52	; 0x34
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	98 ab       	std	Y+48, r25	; 0x30
    1e22:	8f a7       	std	Y+47, r24	; 0x2f
    1e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e26:	98 a9       	ldd	r25, Y+48	; 0x30
    1e28:	9c a7       	std	Y+44, r25	; 0x2c
    1e2a:	8b a7       	std	Y+43, r24	; 0x2b
    1e2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_sendCommand+0x10e>
    1e34:	9c a7       	std	Y+44, r25	; 0x2c
    1e36:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e38:	a2 e3       	ldi	r26, 0x32	; 50
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e2 e3       	ldi	r30, 0x32	; 50
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 64       	ori	r24, 0x40	; 64
    1e44:	8c 93       	st	X, r24
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e8       	ldi	r26, 0x80	; 128
    1e4c:	bf e3       	ldi	r27, 0x3F	; 63
    1e4e:	8f a3       	std	Y+39, r24	; 0x27
    1e50:	98 a7       	std	Y+40, r25	; 0x28
    1e52:	a9 a7       	std	Y+41, r26	; 0x29
    1e54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	6f a1       	ldd	r22, Y+39	; 0x27
    1e58:	78 a5       	ldd	r23, Y+40	; 0x28
    1e5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a ef       	ldi	r20, 0xFA	; 250
    1e64:	54 e4       	ldi	r21, 0x44	; 68
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8b a3       	std	Y+35, r24	; 0x23
    1e70:	9c a3       	std	Y+36, r25	; 0x24
    1e72:	ad a3       	std	Y+37, r26	; 0x25
    1e74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e76:	6b a1       	ldd	r22, Y+35	; 0x23
    1e78:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <LCD_sendCommand+0x176>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9a a3       	std	Y+34, r25	; 0x22
    1e94:	89 a3       	std	Y+33, r24	; 0x21
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1e98:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1eb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9a a3       	std	Y+34, r25	; 0x22
    1ed6:	89 a3       	std	Y+33, r24	; 0x21
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <LCD_sendCommand+0x1d6>
    1eda:	88 ec       	ldi	r24, 0xC8	; 200
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	98 a3       	std	Y+32, r25	; 0x20
    1ee0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ee2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ee4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_sendCommand+0x1c4>
    1eea:	98 a3       	std	Y+32, r25	; 0x20
    1eec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <LCD_sendCommand+0x1b8>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	6b a1       	ldd	r22, Y+35	; 0x23
    1f04:	7c a1       	ldd	r23, Y+36	; 0x24
    1f06:	8d a1       	ldd	r24, Y+37	; 0x25
    1f08:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9a a3       	std	Y+34, r25	; 0x22
    1f14:	89 a3       	std	Y+33, r24	; 0x21
    1f16:	89 a1       	ldd	r24, Y+33	; 0x21
    1f18:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f1c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_sendCommand+0x200>
    1f26:	9e 8f       	std	Y+30, r25	; 0x1e
    1f28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1f2a:	e5 e3       	ldi	r30, 0x35	; 53
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f30:	80 83       	st	Z, r24
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 e8       	ldi	r26, 0x80	; 128
    1f38:	bf e3       	ldi	r27, 0x3F	; 63
    1f3a:	89 8f       	std	Y+25, r24	; 0x19
    1f3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f3e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	69 8d       	ldd	r22, Y+25	; 0x19
    1f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a ef       	ldi	r20, 0xFA	; 250
    1f50:	54 e4       	ldi	r21, 0x44	; 68
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8d 8b       	std	Y+21, r24	; 0x15
    1f5c:	9e 8b       	std	Y+22, r25	; 0x16
    1f5e:	af 8b       	std	Y+23, r26	; 0x17
    1f60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f62:	6d 89       	ldd	r22, Y+21	; 0x15
    1f64:	7e 89       	ldd	r23, Y+22	; 0x16
    1f66:	8f 89       	ldd	r24, Y+23	; 0x17
    1f68:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <LCD_sendCommand+0x262>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1f84:	6d 89       	ldd	r22, Y+21	; 0x15
    1f86:	7e 89       	ldd	r23, Y+22	; 0x16
    1f88:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <LCD_sendCommand+0x2c2>
    1fc6:	88 ec       	ldi	r24, 0xC8	; 200
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9a 8b       	std	Y+18, r25	; 0x12
    1fcc:	89 8b       	std	Y+17, r24	; 0x11
    1fce:	89 89       	ldd	r24, Y+17	; 0x11
    1fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_sendCommand+0x2b0>
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <LCD_sendCommand+0x2a4>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	8b 89       	ldd	r24, Y+19	; 0x13
    2004:	9c 89       	ldd	r25, Y+20	; 0x14
    2006:	98 8b       	std	Y+16, r25	; 0x10
    2008:	8f 87       	std	Y+15, r24	; 0x0f
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	98 89       	ldd	r25, Y+16	; 0x10
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_sendCommand+0x2ec>
    2012:	98 8b       	std	Y+16, r25	; 0x10
    2014:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2016:	a2 e3       	ldi	r26, 0x32	; 50
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e2 e3       	ldi	r30, 0x32	; 50
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	8f 7b       	andi	r24, 0xBF	; 191
    2022:	8c 93       	st	X, r24
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e8       	ldi	r26, 0x80	; 128
    202a:	bf e3       	ldi	r27, 0x3F	; 63
    202c:	8b 87       	std	Y+11, r24	; 0x0b
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	ad 87       	std	Y+13, r26	; 0x0d
    2032:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a ef       	ldi	r20, 0xFA	; 250
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8f 83       	std	Y+7, r24	; 0x07
    204e:	98 87       	std	Y+8, r25	; 0x08
    2050:	a9 87       	std	Y+9, r26	; 0x09
    2052:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_sendCommand+0x354>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_sendCommand+0x3b4>
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_sendCommand+0x3a2>
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_sendCommand+0x396>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_sendCommand+0x3de>
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2108:	e9 96       	adiw	r28, 0x39	; 57
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	e9 97       	sbiw	r28, 0x39	; 57
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2130:	a2 e3       	ldi	r26, 0x32	; 50
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e2 e3       	ldi	r30, 0x32	; 50
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	80 61       	ori	r24, 0x10	; 16
    213c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    213e:	a2 e3       	ldi	r26, 0x32	; 50
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e2 e3       	ldi	r30, 0x32	; 50
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7d       	andi	r24, 0xDF	; 223
    214a:	8c 93       	st	X, r24
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e8       	ldi	r26, 0x80	; 128
    2152:	bf e3       	ldi	r27, 0x3F	; 63
    2154:	8d ab       	std	Y+53, r24	; 0x35
    2156:	9e ab       	std	Y+54, r25	; 0x36
    2158:	af ab       	std	Y+55, r26	; 0x37
    215a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6d a9       	ldd	r22, Y+53	; 0x35
    215e:	7e a9       	ldd	r23, Y+54	; 0x36
    2160:	8f a9       	ldd	r24, Y+55	; 0x37
    2162:	98 ad       	ldd	r25, Y+56	; 0x38
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a ef       	ldi	r20, 0xFA	; 250
    216a:	54 e4       	ldi	r21, 0x44	; 68
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	89 ab       	std	Y+49, r24	; 0x31
    2176:	9a ab       	std	Y+50, r25	; 0x32
    2178:	ab ab       	std	Y+51, r26	; 0x33
    217a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    217c:	69 a9       	ldd	r22, Y+49	; 0x31
    217e:	7a a9       	ldd	r23, Y+50	; 0x32
    2180:	8b a9       	ldd	r24, Y+51	; 0x33
    2182:	9c a9       	ldd	r25, Y+52	; 0x34
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <LCD_displayCharacter+0x84>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	98 ab       	std	Y+48, r25	; 0x30
    219a:	8f a7       	std	Y+47, r24	; 0x2f
    219c:	3f c0       	rjmp	.+126    	; 0x221c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    219e:	69 a9       	ldd	r22, Y+49	; 0x31
    21a0:	7a a9       	ldd	r23, Y+50	; 0x32
    21a2:	8b a9       	ldd	r24, Y+51	; 0x33
    21a4:	9c a9       	ldd	r25, Y+52	; 0x34
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6d a9       	ldd	r22, Y+53	; 0x35
    21b8:	7e a9       	ldd	r23, Y+54	; 0x36
    21ba:	8f a9       	ldd	r24, Y+55	; 0x37
    21bc:	98 ad       	ldd	r25, Y+56	; 0x38
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	98 ab       	std	Y+48, r25	; 0x30
    21dc:	8f a7       	std	Y+47, r24	; 0x2f
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <LCD_displayCharacter+0xe4>
    21e0:	88 ec       	ldi	r24, 0xC8	; 200
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9e a7       	std	Y+46, r25	; 0x2e
    21e6:	8d a7       	std	Y+45, r24	; 0x2d
    21e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_displayCharacter+0xd2>
    21f0:	9e a7       	std	Y+46, r25	; 0x2e
    21f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f6:	98 a9       	ldd	r25, Y+48	; 0x30
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	98 ab       	std	Y+48, r25	; 0x30
    21fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2200:	98 a9       	ldd	r25, Y+48	; 0x30
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <LCD_displayCharacter+0xc6>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	69 a9       	ldd	r22, Y+49	; 0x31
    220a:	7a a9       	ldd	r23, Y+50	; 0x32
    220c:	8b a9       	ldd	r24, Y+51	; 0x33
    220e:	9c a9       	ldd	r25, Y+52	; 0x34
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	98 ab       	std	Y+48, r25	; 0x30
    221a:	8f a7       	std	Y+47, r24	; 0x2f
    221c:	8f a5       	ldd	r24, Y+47	; 0x2f
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	9c a7       	std	Y+44, r25	; 0x2c
    2222:	8b a7       	std	Y+43, r24	; 0x2b
    2224:	8b a5       	ldd	r24, Y+43	; 0x2b
    2226:	9c a5       	ldd	r25, Y+44	; 0x2c
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_displayCharacter+0x10e>
    222c:	9c a7       	std	Y+44, r25	; 0x2c
    222e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2230:	a2 e3       	ldi	r26, 0x32	; 50
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e2 e3       	ldi	r30, 0x32	; 50
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	80 64       	ori	r24, 0x40	; 64
    223c:	8c 93       	st	X, r24
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e8       	ldi	r26, 0x80	; 128
    2244:	bf e3       	ldi	r27, 0x3F	; 63
    2246:	8f a3       	std	Y+39, r24	; 0x27
    2248:	98 a7       	std	Y+40, r25	; 0x28
    224a:	a9 a7       	std	Y+41, r26	; 0x29
    224c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6f a1       	ldd	r22, Y+39	; 0x27
    2250:	78 a5       	ldd	r23, Y+40	; 0x28
    2252:	89 a5       	ldd	r24, Y+41	; 0x29
    2254:	9a a5       	ldd	r25, Y+42	; 0x2a
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a ef       	ldi	r20, 0xFA	; 250
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8b a3       	std	Y+35, r24	; 0x23
    2268:	9c a3       	std	Y+36, r25	; 0x24
    226a:	ad a3       	std	Y+37, r26	; 0x25
    226c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    226e:	6b a1       	ldd	r22, Y+35	; 0x23
    2270:	7c a1       	ldd	r23, Y+36	; 0x24
    2272:	8d a1       	ldd	r24, Y+37	; 0x25
    2274:	9e a1       	ldd	r25, Y+38	; 0x26
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <LCD_displayCharacter+0x176>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9a a3       	std	Y+34, r25	; 0x22
    228c:	89 a3       	std	Y+33, r24	; 0x21
    228e:	3f c0       	rjmp	.+126    	; 0x230e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2290:	6b a1       	ldd	r22, Y+35	; 0x23
    2292:	7c a1       	ldd	r23, Y+36	; 0x24
    2294:	8d a1       	ldd	r24, Y+37	; 0x25
    2296:	9e a1       	ldd	r25, Y+38	; 0x26
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6f a1       	ldd	r22, Y+39	; 0x27
    22aa:	78 a5       	ldd	r23, Y+40	; 0x28
    22ac:	89 a5       	ldd	r24, Y+41	; 0x29
    22ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9a a3       	std	Y+34, r25	; 0x22
    22ce:	89 a3       	std	Y+33, r24	; 0x21
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <LCD_displayCharacter+0x1d6>
    22d2:	88 ec       	ldi	r24, 0xC8	; 200
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	98 a3       	std	Y+32, r25	; 0x20
    22d8:	8f 8f       	std	Y+31, r24	; 0x1f
    22da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22dc:	98 a1       	ldd	r25, Y+32	; 0x20
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_displayCharacter+0x1c4>
    22e2:	98 a3       	std	Y+32, r25	; 0x20
    22e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	89 a1       	ldd	r24, Y+33	; 0x21
    22e8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9a a3       	std	Y+34, r25	; 0x22
    22ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	89 a1       	ldd	r24, Y+33	; 0x21
    22f2:	9a a1       	ldd	r25, Y+34	; 0x22
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <LCD_displayCharacter+0x1b8>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6b a1       	ldd	r22, Y+35	; 0x23
    22fc:	7c a1       	ldd	r23, Y+36	; 0x24
    22fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2300:	9e a1       	ldd	r25, Y+38	; 0x26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
    230e:	89 a1       	ldd	r24, Y+33	; 0x21
    2310:	9a a1       	ldd	r25, Y+34	; 0x22
    2312:	9e 8f       	std	Y+30, r25	; 0x1e
    2314:	8d 8f       	std	Y+29, r24	; 0x1d
    2316:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2318:	9e 8d       	ldd	r25, Y+30	; 0x1e
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_displayCharacter+0x200>
    231e:	9e 8f       	std	Y+30, r25	; 0x1e
    2320:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2322:	e5 e3       	ldi	r30, 0x35	; 53
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	89 ad       	ldd	r24, Y+57	; 0x39
    2328:	80 83       	st	Z, r24
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a0 e8       	ldi	r26, 0x80	; 128
    2330:	bf e3       	ldi	r27, 0x3F	; 63
    2332:	89 8f       	std	Y+25, r24	; 0x19
    2334:	9a 8f       	std	Y+26, r25	; 0x1a
    2336:	ab 8f       	std	Y+27, r26	; 0x1b
    2338:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233a:	69 8d       	ldd	r22, Y+25	; 0x19
    233c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    233e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4a ef       	ldi	r20, 0xFA	; 250
    2348:	54 e4       	ldi	r21, 0x44	; 68
    234a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	8d 8b       	std	Y+21, r24	; 0x15
    2354:	9e 8b       	std	Y+22, r25	; 0x16
    2356:	af 8b       	std	Y+23, r26	; 0x17
    2358:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    235a:	6d 89       	ldd	r22, Y+21	; 0x15
    235c:	7e 89       	ldd	r23, Y+22	; 0x16
    235e:	8f 89       	ldd	r24, Y+23	; 0x17
    2360:	98 8d       	ldd	r25, Y+24	; 0x18
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e8       	ldi	r20, 0x80	; 128
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236e:	88 23       	and	r24, r24
    2370:	2c f4       	brge	.+10     	; 0x237c <LCD_displayCharacter+0x262>
		__ticks = 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c 8b       	std	Y+20, r25	; 0x14
    2378:	8b 8b       	std	Y+19, r24	; 0x13
    237a:	3f c0       	rjmp	.+126    	; 0x23fa <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	3f ef       	ldi	r19, 0xFF	; 255
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	57 e4       	ldi	r21, 0x47	; 71
    238c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	4c f5       	brge	.+82     	; 0x23e6 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2394:	69 8d       	ldd	r22, Y+25	; 0x19
    2396:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2398:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9c 8b       	std	Y+20, r25	; 0x14
    23ba:	8b 8b       	std	Y+19, r24	; 0x13
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <LCD_displayCharacter+0x2c2>
    23be:	88 ec       	ldi	r24, 0xC8	; 200
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9a 8b       	std	Y+18, r25	; 0x12
    23c4:	89 8b       	std	Y+17, r24	; 0x11
    23c6:	89 89       	ldd	r24, Y+17	; 0x11
    23c8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_displayCharacter+0x2b0>
    23ce:	9a 8b       	std	Y+18, r25	; 0x12
    23d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d2:	8b 89       	ldd	r24, Y+19	; 0x13
    23d4:	9c 89       	ldd	r25, Y+20	; 0x14
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	9c 8b       	std	Y+20, r25	; 0x14
    23da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	8b 89       	ldd	r24, Y+19	; 0x13
    23de:	9c 89       	ldd	r25, Y+20	; 0x14
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	69 f7       	brne	.-38     	; 0x23be <LCD_displayCharacter+0x2a4>
    23e4:	14 c0       	rjmp	.+40     	; 0x240e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e6:	6d 89       	ldd	r22, Y+21	; 0x15
    23e8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ea:	8f 89       	ldd	r24, Y+23	; 0x17
    23ec:	98 8d       	ldd	r25, Y+24	; 0x18
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9c 8b       	std	Y+20, r25	; 0x14
    23f8:	8b 8b       	std	Y+19, r24	; 0x13
    23fa:	8b 89       	ldd	r24, Y+19	; 0x13
    23fc:	9c 89       	ldd	r25, Y+20	; 0x14
    23fe:	98 8b       	std	Y+16, r25	; 0x10
    2400:	8f 87       	std	Y+15, r24	; 0x0f
    2402:	8f 85       	ldd	r24, Y+15	; 0x0f
    2404:	98 89       	ldd	r25, Y+16	; 0x10
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LCD_displayCharacter+0x2ec>
    240a:	98 8b       	std	Y+16, r25	; 0x10
    240c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    240e:	a2 e3       	ldi	r26, 0x32	; 50
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e2 e3       	ldi	r30, 0x32	; 50
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8f 7b       	andi	r24, 0xBF	; 191
    241a:	8c 93       	st	X, r24
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a0 e8       	ldi	r26, 0x80	; 128
    2422:	bf e3       	ldi	r27, 0x3F	; 63
    2424:	8b 87       	std	Y+11, r24	; 0x0b
    2426:	9c 87       	std	Y+12, r25	; 0x0c
    2428:	ad 87       	std	Y+13, r26	; 0x0d
    242a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	6b 85       	ldd	r22, Y+11	; 0x0b
    242e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2430:	8d 85       	ldd	r24, Y+13	; 0x0d
    2432:	9e 85       	ldd	r25, Y+14	; 0x0e
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4a ef       	ldi	r20, 0xFA	; 250
    243a:	54 e4       	ldi	r21, 0x44	; 68
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8f 83       	std	Y+7, r24	; 0x07
    2446:	98 87       	std	Y+8, r25	; 0x08
    2448:	a9 87       	std	Y+9, r26	; 0x09
    244a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    244c:	6f 81       	ldd	r22, Y+7	; 0x07
    244e:	78 85       	ldd	r23, Y+8	; 0x08
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <LCD_displayCharacter+0x354>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	4c f5       	brge	.+82     	; 0x24d8 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	6b 85       	ldd	r22, Y+11	; 0x0b
    2488:	7c 85       	ldd	r23, Y+12	; 0x0c
    248a:	8d 85       	ldd	r24, Y+13	; 0x0d
    248c:	9e 85       	ldd	r25, Y+14	; 0x0e
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	0f c0       	rjmp	.+30     	; 0x24ce <LCD_displayCharacter+0x3b4>
    24b0:	88 ec       	ldi	r24, 0xC8	; 200
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_displayCharacter+0x3a2>
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <LCD_displayCharacter+0x396>
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_displayCharacter+0x3de>
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2500:	e9 96       	adiw	r28, 0x39	; 57
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <LCD_displayString+0x6>
    2518:	0f 92       	push	r0
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	9b 83       	std	Y+3, r25	; 0x03
    2520:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2522:	19 82       	std	Y+1, r1	; 0x01
    2524:	0e c0       	rjmp	.+28     	; 0x2542 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	fc 01       	movw	r30, r24
    2532:	e2 0f       	add	r30, r18
    2534:	f3 1f       	adc	r31, r19
    2536:	80 81       	ld	r24, Z
    2538:	0e 94 8d 10 	call	0x211a	; 0x211a <LCD_displayCharacter>
		i++;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	8f 5f       	subi	r24, 0xFF	; 255
    2540:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	fc 01       	movw	r30, r24
    254e:	e2 0f       	add	r30, r18
    2550:	f3 1f       	adc	r31, r19
    2552:	80 81       	ld	r24, Z
    2554:	88 23       	and	r24, r24
    2556:	39 f7       	brne	.-50     	; 0x2526 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	00 d0       	rcall	.+0      	; 0x256a <LCD_goToRowColumn+0x6>
    256a:	00 d0       	rcall	.+0      	; 0x256c <LCD_goToRowColumn+0x8>
    256c:	0f 92       	push	r0
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	8a 83       	std	Y+2, r24	; 0x02
    2574:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3d 83       	std	Y+5, r19	; 0x05
    257e:	2c 83       	std	Y+4, r18	; 0x04
    2580:	8c 81       	ldd	r24, Y+4	; 0x04
    2582:	9d 81       	ldd	r25, Y+5	; 0x05
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	c1 f0       	breq	.+48     	; 0x25ba <LCD_goToRowColumn+0x56>
    258a:	2c 81       	ldd	r18, Y+4	; 0x04
    258c:	3d 81       	ldd	r19, Y+5	; 0x05
    258e:	22 30       	cpi	r18, 0x02	; 2
    2590:	31 05       	cpc	r19, r1
    2592:	2c f4       	brge	.+10     	; 0x259e <LCD_goToRowColumn+0x3a>
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	9d 81       	ldd	r25, Y+5	; 0x05
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 f0       	breq	.+24     	; 0x25b4 <LCD_goToRowColumn+0x50>
    259c:	19 c0       	rjmp	.+50     	; 0x25d0 <LCD_goToRowColumn+0x6c>
    259e:	2c 81       	ldd	r18, Y+4	; 0x04
    25a0:	3d 81       	ldd	r19, Y+5	; 0x05
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	69 f0       	breq	.+26     	; 0x25c2 <LCD_goToRowColumn+0x5e>
    25a8:	8c 81       	ldd	r24, Y+4	; 0x04
    25aa:	9d 81       	ldd	r25, Y+5	; 0x05
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	91 05       	cpc	r25, r1
    25b0:	61 f0       	breq	.+24     	; 0x25ca <LCD_goToRowColumn+0x66>
    25b2:	0e c0       	rjmp	.+28     	; 0x25d0 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	0b c0       	rjmp	.+22     	; 0x25d0 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	80 5c       	subi	r24, 0xC0	; 192
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	07 c0       	rjmp	.+14     	; 0x25d0 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	80 5f       	subi	r24, 0xF0	; 240
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	80 5b       	subi	r24, 0xB0	; 176
    25ce:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	80 68       	ori	r24, 0x80	; 128
    25d4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_sendCommand>
}
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <LCD_displayStringRowColumn+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LCD_displayStringRowColumn+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	6a 83       	std	Y+2, r22	; 0x02
    25f8:	5c 83       	std	Y+4, r21	; 0x04
    25fa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2600:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_displayString>
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	62 97       	sbiw	r28, 0x12	; 18
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	9a 8b       	std	Y+18, r25	; 0x12
    2630:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2632:	89 89       	ldd	r24, Y+17	; 0x11
    2634:	9a 89       	ldd	r25, Y+18	; 0x12
    2636:	9e 01       	movw	r18, r28
    2638:	2f 5f       	subi	r18, 0xFF	; 255
    263a:	3f 4f       	sbci	r19, 0xFF	; 255
    263c:	b9 01       	movw	r22, r18
    263e:	4a e0       	ldi	r20, 0x0A	; 10
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	0e 94 78 15 	call	0x2af0	; 0x2af0 <itoa>
   LCD_displayString(buff);
    2646:	ce 01       	movw	r24, r28
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_displayString>
}
    264e:	62 96       	adiw	r28, 0x12	; 18
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_sendCommand>
}
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <getPassword>:

// this functions is responsible of taking password from the user
// this array which the password will store in

void getPassword(uint8 array[])
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	62 97       	sbiw	r28, 0x12	; 18
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	9a 8b       	std	Y+18, r25	; 0x12
    268a:	89 8b       	std	Y+17, r24	; 0x11
	sint8 i;
	uint8 key;
	for (i = 0 ; i < 5 ; i++ )
    268c:	18 8a       	std	Y+16, r1	; 0x10
    268e:	b9 c0       	rjmp	.+370    	; 0x2802 <getPassword+0x18e>
	{
		key = KeyPad_getPressedKey();
    2690:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <KeyPad_getPressedKey>
    2694:	8f 87       	std	Y+15, r24	; 0x0f
		// last element in password
		if(i == 4)
    2696:	88 89       	ldd	r24, Y+16	; 0x10
    2698:	84 30       	cpi	r24, 0x04	; 4
    269a:	a9 f4       	brne	.+42     	; 0x26c6 <getPassword+0x52>
		{
			/*
			 * reset the password in case of miss writing it
			 */
			if ( key == '*')
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	8a 32       	cpi	r24, 0x2A	; 42
    26a0:	51 f4       	brne	.+20     	; 0x26b6 <getPassword+0x42>
			{
				LCD_displayStringRowColumn(1, 0, "                ");
    26a2:	27 e4       	ldi	r18, 0x47	; 71
    26a4:	31 e0       	ldi	r19, 0x01	; 1
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	a9 01       	movw	r20, r18
    26ac:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
							i = -1;
    26b0:	8f ef       	ldi	r24, 0xFF	; 255
    26b2:	88 8b       	std	Y+16, r24	; 0x10
    26b4:	a3 c0       	rjmp	.+326    	; 0x27fc <getPassword+0x188>
							continue ;
			}
			// enter
			else if(key == 13)
    26b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b8:	8d 30       	cpi	r24, 0x0D	; 13
    26ba:	09 f4       	brne	.+2      	; 0x26be <getPassword+0x4a>
    26bc:	a6 c0       	rjmp	.+332    	; 0x280a <getPassword+0x196>
			{
				break;
			}
			else
			{
				i = i-1;
    26be:	88 89       	ldd	r24, Y+16	; 0x10
    26c0:	81 50       	subi	r24, 0x01	; 1
    26c2:	88 8b       	std	Y+16, r24	; 0x10
    26c4:	9b c0       	rjmp	.+310    	; 0x27fc <getPassword+0x188>
		{

			/*
				* reset the password in case of miss writing it
			 */
					if (key == '*')
    26c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c8:	8a 32       	cpi	r24, 0x2A	; 42
    26ca:	51 f4       	brne	.+20     	; 0x26e0 <getPassword+0x6c>
					{
						LCD_displayStringRowColumn(1, 0, "                ");
    26cc:	27 e4       	ldi	r18, 0x47	; 71
    26ce:	31 e0       	ldi	r19, 0x01	; 1
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	a9 01       	movw	r20, r18
    26d6:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_displayStringRowColumn>
						i = -1;
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	88 8b       	std	Y+16, r24	; 0x10
    26de:	8e c0       	rjmp	.+284    	; 0x27fc <getPassword+0x188>
						continue ;
					}
					// full filling the password array
					else if (key >= 0 && key<=9)
    26e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e2:	8a 30       	cpi	r24, 0x0A	; 10
    26e4:	08 f0       	brcs	.+2      	; 0x26e8 <getPassword+0x74>
    26e6:	87 c0       	rjmp	.+270    	; 0x27f6 <getPassword+0x182>
					{
						array[i] = key;
    26e8:	88 89       	ldd	r24, Y+16	; 0x10
    26ea:	28 2f       	mov	r18, r24
    26ec:	33 27       	eor	r19, r19
    26ee:	27 fd       	sbrc	r18, 7
    26f0:	30 95       	com	r19
    26f2:	89 89       	ldd	r24, Y+17	; 0x11
    26f4:	9a 89       	ldd	r25, Y+18	; 0x12
    26f6:	fc 01       	movw	r30, r24
    26f8:	e2 0f       	add	r30, r18
    26fa:	f3 1f       	adc	r31, r19
    26fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26fe:	80 83       	st	Z, r24
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	aa ef       	ldi	r26, 0xFA	; 250
    2706:	b3 e4       	ldi	r27, 0x43	; 67
    2708:	8b 87       	std	Y+11, r24	; 0x0b
    270a:	9c 87       	std	Y+12, r25	; 0x0c
    270c:	ad 87       	std	Y+13, r26	; 0x0d
    270e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	6b 85       	ldd	r22, Y+11	; 0x0b
    2712:	7c 85       	ldd	r23, Y+12	; 0x0c
    2714:	8d 85       	ldd	r24, Y+13	; 0x0d
    2716:	9e 85       	ldd	r25, Y+14	; 0x0e
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a ef       	ldi	r20, 0xFA	; 250
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	8f 83       	std	Y+7, r24	; 0x07
    272a:	98 87       	std	Y+8, r25	; 0x08
    272c:	a9 87       	std	Y+9, r26	; 0x09
    272e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	78 85       	ldd	r23, Y+8	; 0x08
    2734:	89 85       	ldd	r24, Y+9	; 0x09
    2736:	9a 85       	ldd	r25, Y+10	; 0x0a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	2c f4       	brge	.+10     	; 0x2752 <getPassword+0xde>
		__ticks = 1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	3f c0       	rjmp	.+126    	; 0x27d0 <getPassword+0x15c>
	else if (__tmp > 65535)
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	3f ef       	ldi	r19, 0xFF	; 255
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	57 e4       	ldi	r21, 0x47	; 71
    2762:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	4c f5       	brge	.+82     	; 0x27bc <getPassword+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	6b 85       	ldd	r22, Y+11	; 0x0b
    276c:	7c 85       	ldd	r23, Y+12	; 0x0c
    276e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2770:	9e 85       	ldd	r25, Y+14	; 0x0e
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <getPassword+0x13e>
    2794:	88 ec       	ldi	r24, 0xC8	; 200
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <getPassword+0x12c>
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	69 f7       	brne	.-38     	; 0x2794 <getPassword+0x120>
    27ba:	14 c0       	rjmp	.+40     	; 0x27e4 <getPassword+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <getPassword+0x168>
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
					{
						i = i-1;
						continue;
					}
					_delay_ms(500);
					LCD_goToRowColumn(1 , i);
    27e4:	98 89       	ldd	r25, Y+16	; 0x10
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	69 2f       	mov	r22, r25
    27ea:	0e 94 b2 12 	call	0x2564	; 0x2564 <LCD_goToRowColumn>
					LCD_displayCharacter('*');
    27ee:	8a e2       	ldi	r24, 0x2A	; 42
    27f0:	0e 94 8d 10 	call	0x211a	; 0x211a <LCD_displayCharacter>
    27f4:	03 c0       	rjmp	.+6      	; 0x27fc <getPassword+0x188>
						array[i] = key;
					}
					// in case of entering wrong number
					else
					{
						i = i-1;
    27f6:	88 89       	ldd	r24, Y+16	; 0x10
    27f8:	81 50       	subi	r24, 0x01	; 1
    27fa:	88 8b       	std	Y+16, r24	; 0x10

void getPassword(uint8 array[])
{
	sint8 i;
	uint8 key;
	for (i = 0 ; i < 5 ; i++ )
    27fc:	88 89       	ldd	r24, Y+16	; 0x10
    27fe:	8f 5f       	subi	r24, 0xFF	; 255
    2800:	88 8b       	std	Y+16, r24	; 0x10
    2802:	88 89       	ldd	r24, Y+16	; 0x10
    2804:	85 30       	cpi	r24, 0x05	; 5
    2806:	0c f4       	brge	.+2      	; 0x280a <getPassword+0x196>
    2808:	43 cf       	rjmp	.-378    	; 0x2690 <getPassword+0x1c>
		}


	}

}
    280a:	62 96       	adiw	r28, 0x12	; 18
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <readyToSend>:
  * we will change the password into a string to be sent
  * this function will take two arrays array 1 is the passowrd as number
  * and array2 is where we store the string
  */
void readyToSend(uint8 array1[], uint8 array2[])
 {
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <readyToSend+0x6>
    2822:	00 d0       	rcall	.+0      	; 0x2824 <readyToSend+0x8>
    2824:	0f 92       	push	r0
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	9b 83       	std	Y+3, r25	; 0x03
    282c:	8a 83       	std	Y+2, r24	; 0x02
    282e:	7d 83       	std	Y+5, r23	; 0x05
    2830:	6c 83       	std	Y+4, r22	; 0x04
	sint8 i ;
	for(i = 0 ; i < 5 ; i++)
    2832:	19 82       	std	Y+1, r1	; 0x01
    2834:	29 c0       	rjmp	.+82     	; 0x2888 <readyToSend+0x6c>
	{
		if(i==4)
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	84 30       	cpi	r24, 0x04	; 4
    283a:	69 f4       	brne	.+26     	; 0x2856 <readyToSend+0x3a>
		{
			array2[i] = '#';		//making last element of the array2 # as finishing the string
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	28 2f       	mov	r18, r24
    2840:	33 27       	eor	r19, r19
    2842:	27 fd       	sbrc	r18, 7
    2844:	30 95       	com	r19
    2846:	8c 81       	ldd	r24, Y+4	; 0x04
    2848:	9d 81       	ldd	r25, Y+5	; 0x05
    284a:	fc 01       	movw	r30, r24
    284c:	e2 0f       	add	r30, r18
    284e:	f3 1f       	adc	r31, r19
    2850:	83 e2       	ldi	r24, 0x23	; 35
    2852:	80 83       	st	Z, r24
    2854:	16 c0       	rjmp	.+44     	; 0x2882 <readyToSend+0x66>
		}
		else
		{
		array2[i] = array1[i];		// storing all element of array1 into array2
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	28 2f       	mov	r18, r24
    285a:	33 27       	eor	r19, r19
    285c:	27 fd       	sbrc	r18, 7
    285e:	30 95       	com	r19
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	9d 81       	ldd	r25, Y+5	; 0x05
    2864:	dc 01       	movw	r26, r24
    2866:	a2 0f       	add	r26, r18
    2868:	b3 1f       	adc	r27, r19
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	28 2f       	mov	r18, r24
    286e:	33 27       	eor	r19, r19
    2870:	27 fd       	sbrc	r18, 7
    2872:	30 95       	com	r19
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	9b 81       	ldd	r25, Y+3	; 0x03
    2878:	fc 01       	movw	r30, r24
    287a:	e2 0f       	add	r30, r18
    287c:	f3 1f       	adc	r31, r19
    287e:	80 81       	ld	r24, Z
    2880:	8c 93       	st	X, r24
  * and array2 is where we store the string
  */
void readyToSend(uint8 array1[], uint8 array2[])
 {
	sint8 i ;
	for(i = 0 ; i < 5 ; i++)
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	85 30       	cpi	r24, 0x05	; 5
    288c:	a4 f2       	brlt	.-88     	; 0x2836 <readyToSend+0x1a>
		{
		array2[i] = array1[i];		// storing all element of array1 into array2
		}
	}

 }
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(UART_ConfigType *Config_PTR)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <UART_init+0x6>
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	9a 83       	std	Y+2, r25	; 0x02
    28aa:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28ac:	eb e2       	ldi	r30, 0x2B	; 43
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28b4:	ea e2       	ldi	r30, 0x2A	; 42
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	88 e1       	ldi	r24, 0x18	; 24
    28ba:	80 83       	st	Z, r24
	 * UPM1:0  = CONFIGURABLE
	 * USBS    = CONFIGURABLE
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    28bc:	e0 e4       	ldi	r30, 0x40	; 64
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 e8       	ldi	r24, 0x80	; 128
    28c2:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_PTR->parity)<<4);
    28c4:	a0 e4       	ldi	r26, 0x40	; 64
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e0 e4       	ldi	r30, 0x40	; 64
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	28 2f       	mov	r18, r24
    28d0:	2f 7c       	andi	r18, 0xCF	; 207
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	80 81       	ld	r24, Z
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	82 95       	swap	r24
    28de:	92 95       	swap	r25
    28e0:	90 7f       	andi	r25, 0xF0	; 240
    28e2:	98 27       	eor	r25, r24
    28e4:	80 7f       	andi	r24, 0xF0	; 240
    28e6:	98 27       	eor	r25, r24
    28e8:	82 2b       	or	r24, r18
    28ea:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_PTR->stopBit)<<3);
    28ec:	a0 e4       	ldi	r26, 0x40	; 64
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e0 e4       	ldi	r30, 0x40	; 64
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	28 2f       	mov	r18, r24
    28f8:	27 7f       	andi	r18, 0xF7	; 247
    28fa:	e9 81       	ldd	r30, Y+1	; 0x01
    28fc:	fa 81       	ldd	r31, Y+2	; 0x02
    28fe:	81 81       	ldd	r24, Z+1	; 0x01
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	82 2b       	or	r24, r18
    2912:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_PTR->charSize)<<1);
    2914:	a0 e4       	ldi	r26, 0x40	; 64
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e0 e4       	ldi	r30, 0x40	; 64
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	28 2f       	mov	r18, r24
    2920:	29 7f       	andi	r18, 0xF9	; 249
    2922:	e9 81       	ldd	r30, Y+1	; 0x01
    2924:	fa 81       	ldd	r31, Y+2	; 0x02
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	82 2b       	or	r24, r18
    2932:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2934:	e0 e4       	ldi	r30, 0x40	; 64
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    293a:	e9 e2       	ldi	r30, 0x29	; 41
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	87 e6       	ldi	r24, 0x67	; 103
    2940:	80 83       	st	Z, r24
}
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	0f 92       	push	r0
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2958:	eb e2       	ldi	r30, 0x2B	; 43
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	88 2f       	mov	r24, r24
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	80 72       	andi	r24, 0x20	; 32
    2964:	90 70       	andi	r25, 0x00	; 0
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	b9 f3       	breq	.-18     	; 0x2958 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    296a:	ec e2       	ldi	r30, 0x2C	; 44
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2982:	eb e2       	ldi	r30, 0x2B	; 43
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	88 23       	and	r24, r24
    298a:	dc f7       	brge	.-10     	; 0x2982 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    298c:	ec e2       	ldi	r30, 0x2C	; 44
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
}
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	00 d0       	rcall	.+0      	; 0x299e <UART_sendString+0x6>
    299e:	0f 92       	push	r0
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9b 83       	std	Y+3, r25	; 0x03
    29a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29a8:	19 82       	std	Y+1, r1	; 0x01
    29aa:	0e c0       	rjmp	.+28     	; 0x29c8 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	9b 81       	ldd	r25, Y+3	; 0x03
    29b6:	fc 01       	movw	r30, r24
    29b8:	e2 0f       	add	r30, r18
    29ba:	f3 1f       	adc	r31, r19
    29bc:	80 81       	ld	r24, Z
    29be:	0e 94 a6 14 	call	0x294c	; 0x294c <UART_sendByte>
		i++;
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	8f 5f       	subi	r24, 0xFF	; 255
    29c6:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	9b 81       	ldd	r25, Y+3	; 0x03
    29d2:	fc 01       	movw	r30, r24
    29d4:	e2 0f       	add	r30, r18
    29d6:	f3 1f       	adc	r31, r19
    29d8:	80 81       	ld	r24, Z
    29da:	88 23       	and	r24, r24
    29dc:	39 f7       	brne	.-50     	; 0x29ac <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <UART_receiveString+0xa>
    29f4:	0f 92       	push	r0
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9b 83       	std	Y+3, r25	; 0x03
    29fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29fe:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0a:	8c 01       	movw	r16, r24
    2a0c:	02 0f       	add	r16, r18
    2a0e:	13 1f       	adc	r17, r19
    2a10:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_recieveByte>
    2a14:	f8 01       	movw	r30, r16
    2a16:	80 83       	st	Z, r24
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	8c 01       	movw	r16, r24
    2a2c:	02 0f       	add	r16, r18
    2a2e:	13 1f       	adc	r17, r19
    2a30:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_recieveByte>
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	9b 81       	ldd	r25, Y+3	; 0x03
    2a42:	fc 01       	movw	r30, r24
    2a44:	e2 0f       	add	r30, r18
    2a46:	f3 1f       	adc	r31, r19
    2a48:	80 81       	ld	r24, Z
    2a4a:	83 32       	cpi	r24, 0x23	; 35
    2a4c:	31 f7       	brne	.-52     	; 0x2a1a <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	8a 81       	ldd	r24, Y+2	; 0x02
    2a56:	9b 81       	ldd	r25, Y+3	; 0x03
    2a58:	fc 01       	movw	r30, r24
    2a5a:	e2 0f       	add	r30, r18
    2a5c:	f3 1f       	adc	r31, r19
    2a5e:	10 82       	st	Z, r1
}
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	08 95       	ret

00002a70 <__prologue_saves__>:
    2a70:	2f 92       	push	r2
    2a72:	3f 92       	push	r3
    2a74:	4f 92       	push	r4
    2a76:	5f 92       	push	r5
    2a78:	6f 92       	push	r6
    2a7a:	7f 92       	push	r7
    2a7c:	8f 92       	push	r8
    2a7e:	9f 92       	push	r9
    2a80:	af 92       	push	r10
    2a82:	bf 92       	push	r11
    2a84:	cf 92       	push	r12
    2a86:	df 92       	push	r13
    2a88:	ef 92       	push	r14
    2a8a:	ff 92       	push	r15
    2a8c:	0f 93       	push	r16
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	ca 1b       	sub	r28, r26
    2a9a:	db 0b       	sbc	r29, r27
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	09 94       	ijmp

00002aa8 <__epilogue_restores__>:
    2aa8:	2a 88       	ldd	r2, Y+18	; 0x12
    2aaa:	39 88       	ldd	r3, Y+17	; 0x11
    2aac:	48 88       	ldd	r4, Y+16	; 0x10
    2aae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ab6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ab8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aba:	b9 84       	ldd	r11, Y+9	; 0x09
    2abc:	c8 84       	ldd	r12, Y+8	; 0x08
    2abe:	df 80       	ldd	r13, Y+7	; 0x07
    2ac0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ac4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ac6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ac8:	aa 81       	ldd	r26, Y+2	; 0x02
    2aca:	b9 81       	ldd	r27, Y+1	; 0x01
    2acc:	ce 0f       	add	r28, r30
    2ace:	d1 1d       	adc	r29, r1
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	ed 01       	movw	r28, r26
    2adc:	08 95       	ret

00002ade <strcmp>:
    2ade:	fb 01       	movw	r30, r22
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	8d 91       	ld	r24, X+
    2ae4:	01 90       	ld	r0, Z+
    2ae6:	80 19       	sub	r24, r0
    2ae8:	01 10       	cpse	r0, r1
    2aea:	d9 f3       	breq	.-10     	; 0x2ae2 <strcmp+0x4>
    2aec:	99 0b       	sbc	r25, r25
    2aee:	08 95       	ret

00002af0 <itoa>:
    2af0:	fb 01       	movw	r30, r22
    2af2:	9f 01       	movw	r18, r30
    2af4:	e8 94       	clt
    2af6:	42 30       	cpi	r20, 0x02	; 2
    2af8:	c4 f0       	brlt	.+48     	; 0x2b2a <itoa+0x3a>
    2afa:	45 32       	cpi	r20, 0x25	; 37
    2afc:	b4 f4       	brge	.+44     	; 0x2b2a <itoa+0x3a>
    2afe:	4a 30       	cpi	r20, 0x0A	; 10
    2b00:	29 f4       	brne	.+10     	; 0x2b0c <itoa+0x1c>
    2b02:	97 fb       	bst	r25, 7
    2b04:	1e f4       	brtc	.+6      	; 0x2b0c <itoa+0x1c>
    2b06:	90 95       	com	r25
    2b08:	81 95       	neg	r24
    2b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0c:	64 2f       	mov	r22, r20
    2b0e:	77 27       	eor	r23, r23
    2b10:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__udivmodhi4>
    2b14:	80 5d       	subi	r24, 0xD0	; 208
    2b16:	8a 33       	cpi	r24, 0x3A	; 58
    2b18:	0c f0       	brlt	.+2      	; 0x2b1c <itoa+0x2c>
    2b1a:	89 5d       	subi	r24, 0xD9	; 217
    2b1c:	81 93       	st	Z+, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	a1 f7       	brne	.-24     	; 0x2b0c <itoa+0x1c>
    2b24:	16 f4       	brtc	.+4      	; 0x2b2a <itoa+0x3a>
    2b26:	5d e2       	ldi	r21, 0x2D	; 45
    2b28:	51 93       	st	Z+, r21
    2b2a:	10 82       	st	Z, r1
    2b2c:	c9 01       	movw	r24, r18
    2b2e:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <strrev>

00002b32 <__eerd_byte_m16>:
    2b32:	e1 99       	sbic	0x1c, 1	; 28
    2b34:	fe cf       	rjmp	.-4      	; 0x2b32 <__eerd_byte_m16>
    2b36:	9f bb       	out	0x1f, r25	; 31
    2b38:	8e bb       	out	0x1e, r24	; 30
    2b3a:	e0 9a       	sbi	0x1c, 0	; 28
    2b3c:	99 27       	eor	r25, r25
    2b3e:	8d b3       	in	r24, 0x1d	; 29
    2b40:	08 95       	ret

00002b42 <__eewr_byte_m16>:
    2b42:	26 2f       	mov	r18, r22

00002b44 <__eewr_r18_m16>:
    2b44:	e1 99       	sbic	0x1c, 1	; 28
    2b46:	fe cf       	rjmp	.-4      	; 0x2b44 <__eewr_r18_m16>
    2b48:	9f bb       	out	0x1f, r25	; 31
    2b4a:	8e bb       	out	0x1e, r24	; 30
    2b4c:	2d bb       	out	0x1d, r18	; 29
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	e2 9a       	sbi	0x1c, 2	; 28
    2b54:	e1 9a       	sbi	0x1c, 1	; 28
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	01 96       	adiw	r24, 0x01	; 1
    2b5a:	08 95       	ret

00002b5c <strrev>:
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	fc 01       	movw	r30, r24
    2b60:	67 2f       	mov	r22, r23
    2b62:	71 91       	ld	r23, Z+
    2b64:	77 23       	and	r23, r23
    2b66:	e1 f7       	brne	.-8      	; 0x2b60 <strrev+0x4>
    2b68:	32 97       	sbiw	r30, 0x02	; 2
    2b6a:	04 c0       	rjmp	.+8      	; 0x2b74 <strrev+0x18>
    2b6c:	7c 91       	ld	r23, X
    2b6e:	6d 93       	st	X+, r22
    2b70:	70 83       	st	Z, r23
    2b72:	62 91       	ld	r22, -Z
    2b74:	ae 17       	cp	r26, r30
    2b76:	bf 07       	cpc	r27, r31
    2b78:	c8 f3       	brcs	.-14     	; 0x2b6c <strrev+0x10>
    2b7a:	08 95       	ret

00002b7c <__udivmodhi4>:
    2b7c:	aa 1b       	sub	r26, r26
    2b7e:	bb 1b       	sub	r27, r27
    2b80:	51 e1       	ldi	r21, 0x11	; 17
    2b82:	07 c0       	rjmp	.+14     	; 0x2b92 <__udivmodhi4_ep>

00002b84 <__udivmodhi4_loop>:
    2b84:	aa 1f       	adc	r26, r26
    2b86:	bb 1f       	adc	r27, r27
    2b88:	a6 17       	cp	r26, r22
    2b8a:	b7 07       	cpc	r27, r23
    2b8c:	10 f0       	brcs	.+4      	; 0x2b92 <__udivmodhi4_ep>
    2b8e:	a6 1b       	sub	r26, r22
    2b90:	b7 0b       	sbc	r27, r23

00002b92 <__udivmodhi4_ep>:
    2b92:	88 1f       	adc	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	5a 95       	dec	r21
    2b98:	a9 f7       	brne	.-22     	; 0x2b84 <__udivmodhi4_loop>
    2b9a:	80 95       	com	r24
    2b9c:	90 95       	com	r25
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	08 95       	ret

00002ba4 <_exit>:
    2ba4:	f8 94       	cli

00002ba6 <__stop_program>:
    2ba6:	ff cf       	rjmp	.-2      	; 0x2ba6 <__stop_program>
