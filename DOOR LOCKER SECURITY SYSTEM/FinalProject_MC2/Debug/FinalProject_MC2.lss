
FinalProject_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002410  000024a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  000024b0  2**0
                  ALLOC
  3 .stab         00002958  00000000  00000000  000024b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001144  00000000  00000000  00004e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a69b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <main>
      8a:	0c 94 06 12 	jmp	0x240c	; 0x240c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DCMOTOR_Init>:
 *
 *******************************************************************************/

#include"DC_Motor.h"
void DCMOTOR_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DIRECTION |= (1 << IN1); /* configure IN1 pin as output pin*/
     b4e:	a4 e3       	ldi	r26, 0x34	; 52
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e4 e3       	ldi	r30, 0x34	; 52
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	84 60       	ori	r24, 0x04	; 4
     b5a:	8c 93       	st	X, r24
	MOTOR_DIRECTION |= (1 << IN2); /* configure IN1 pin as output pin*/
     b5c:	a4 e3       	ldi	r26, 0x34	; 52
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e4 e3       	ldi	r30, 0x34	; 52
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24

	/*Motor is stop at the beginning*/
	MOTOR_OUTPUT &= ~((1 << IN1) | (1 << IN2));
     b6a:	a5 e3       	ldi	r26, 0x35	; 53
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e5 e3       	ldi	r30, 0x35	; 53
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	83 7f       	andi	r24, 0xF3	; 243
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <DCMOTOR_onClockWise>:
void DCMOTOR_onClockWise(uint16 duty_cycle)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <DCMOTOR_onClockWise+0x6>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	89 83       	std	Y+1, r24	; 0x01
	/* Direction of the DC Motor*/
	MOTOR_OUTPUT |= (1 << IN1);
     b8c:	a5 e3       	ldi	r26, 0x35	; 53
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e5 e3       	ldi	r30, 0x35	; 53
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	84 60       	ori	r24, 0x04	; 4
     b98:	8c 93       	st	X, r24
	MOTOR_OUTPUT &= ~(1 << IN2);
     b9a:	a5 e3       	ldi	r26, 0x35	; 53
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e5 e3       	ldi	r30, 0x35	; 53
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	87 7f       	andi	r24, 0xF7	; 247
     ba6:	8c 93       	st	X, r24

	/* Timer 1 Fast PWM mode*/
	TCNT1 = 0; //initial timer value
     ba8:	ec e4       	ldi	r30, 0x4C	; 76
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	11 82       	std	Z+1, r1	; 0x01
     bae:	10 82       	st	Z, r1
	ICR1 = TOP; //top value
     bb0:	e6 e4       	ldi	r30, 0x46	; 70
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 e5       	ldi	r24, 0x50	; 80
     bb6:	93 ec       	ldi	r25, 0xC3	; 195
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	80 83       	st	Z, r24
	OCR1A = duty_cycle;
     bbc:	ea e4       	ldi	r30, 0x4A	; 74
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	91 83       	std	Z+1, r25	; 0x01
     bc6:	80 83       	st	Z, r24

	DDRD = DDRD | (1 << PD5); //set OC1A as output pin --> pin where the PWM signal is generated from MC.
     bc8:	a1 e3       	ldi	r26, 0x31	; 49
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e1 e3       	ldi	r30, 0x31	; 49
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 62       	ori	r24, 0x20	; 32
     bd4:	8c 93       	st	X, r24
	 * COM1A1=1 Clear OC0 on compare match(Non-Inverting Mode)
	 * CS10=1 freq=F_CPU
	 * CS11=0 freq=F_CPU
	 * CS12=0 freq=F_CPU
	 */
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
     bd6:	ef e4       	ldi	r30, 0x4F	; 79
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	82 e8       	ldi	r24, 0x82	; 130
     bdc:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << FOC1A);
     bde:	af e4       	ldi	r26, 0x4F	; 79
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ef e4       	ldi	r30, 0x4F	; 79
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	8c 93       	st	X, r24
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10);
     bec:	ee e4       	ldi	r30, 0x4E	; 78
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	89 e1       	ldi	r24, 0x19	; 25
     bf2:	80 83       	st	Z, r24
}
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <DCMOTOR_onAntiClockWise>:

void DCMOTOR_onAntiClockWise(uint16 duty_cycle)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <DCMOTOR_onAntiClockWise+0x6>
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
	/* Direction of the DC Motor*/
	MOTOR_OUTPUT &= ~(1 << IN1);
     c0c:	a5 e3       	ldi	r26, 0x35	; 53
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e5 e3       	ldi	r30, 0x35	; 53
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8b 7f       	andi	r24, 0xFB	; 251
     c18:	8c 93       	st	X, r24
	MOTOR_OUTPUT |= (1 << IN2);
     c1a:	a5 e3       	ldi	r26, 0x35	; 53
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e5 e3       	ldi	r30, 0x35	; 53
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	8c 93       	st	X, r24

	/* Timer 1 Fast PWM mode*/
	TCNT1 = 0; //initial timer value
     c28:	ec e4       	ldi	r30, 0x4C	; 76
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	11 82       	std	Z+1, r1	; 0x01
     c2e:	10 82       	st	Z, r1
	ICR1 = TOP; //top value
     c30:	e6 e4       	ldi	r30, 0x46	; 70
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 e5       	ldi	r24, 0x50	; 80
     c36:	93 ec       	ldi	r25, 0xC3	; 195
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	80 83       	st	Z, r24
	OCR1A = duty_cycle;
     c3c:	ea e4       	ldi	r30, 0x4A	; 74
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	91 83       	std	Z+1, r25	; 0x01
     c46:	80 83       	st	Z, r24

	DDRD = DDRD | (1 << PD5); //set OC1A as output pin --> pin where the PWM signal is generated from MC.
     c48:	a1 e3       	ldi	r26, 0x31	; 49
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e1 e3       	ldi	r30, 0x31	; 49
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	8c 93       	st	X, r24
	 * COM1A1=1 Clear OC0 on compare match(Non-Inverting Mode)
	 * CS10=1 freq=F_CPU
	 * CS11=0 freq=F_CPU
	 * CS12=0 freq=F_CPU
	 */
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
     c56:	ef e4       	ldi	r30, 0x4F	; 79
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	82 e8       	ldi	r24, 0x82	; 130
     c5c:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << FOC1A);
     c5e:	af e4       	ldi	r26, 0x4F	; 79
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	ef e4       	ldi	r30, 0x4F	; 79
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	87 7f       	andi	r24, 0xF7	; 247
     c6a:	8c 93       	st	X, r24
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10);
     c6c:	ee e4       	ldi	r30, 0x4E	; 78
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	89 e1       	ldi	r24, 0x19	; 25
     c72:	80 83       	st	Z, r24
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <DCMOTOR_stop>:

void DCMOTOR_stop()
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	MOTOR_OUTPUT &= ~(1<<IN1);
     c86:	a5 e3       	ldi	r26, 0x35	; 53
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e5 e3       	ldi	r30, 0x35	; 53
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8b 7f       	andi	r24, 0xFB	; 251
     c92:	8c 93       	st	X, r24
	MOTOR_OUTPUT &= ~(1<<IN2);
     c94:	a5 e3       	ldi	r26, 0x35	; 53
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e5 e3       	ldi	r30, 0x35	; 53
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	87 7f       	andi	r24, 0xF7	; 247
     ca0:	8c 93       	st	X, r24
	TCCR1A =0;
     ca2:	ef e4       	ldi	r30, 0x4F	; 79
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	10 82       	st	Z, r1
	TCCR1B =0;
     ca8:	ee e4       	ldi	r30, 0x4E	; 78
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1

}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <main>:
 *******************************************************************************/
#include"MC2.h"
uint8 seconds=0;

int main(void)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	cd 54       	subi	r28, 0x4D	; 77
     cbe:	d0 40       	sbci	r29, 0x00	; 0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 newPassword[N];
	uint8 openPassword[N];
	uint8 changePassword[N];
	uint8 buffer[N];
	uint8 state = 0;
     cca:	18 aa       	std	Y+48, r1	; 0x30
	uint8 screen = 0;
     ccc:	1f a6       	std	Y+47, r1	; 0x2f
	uint8 checkPassword;
	uint8 wrongCount = 0;
     cce:	1d a6       	std	Y+45, r1	; 0x2d

	// structures to Configure modules

	Timer0_ConfigType Timer0_Config = {F_CPU_256};
     cd0:	fe 01       	movw	r30, r28
     cd2:	eb 5b       	subi	r30, 0xBB	; 187
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	80 83       	st	Z, r24
	UART_ConfigType UART_Config = { ENABLED_EVEN , TWO_BIT_STOP , EIGHT_BIT};
     cda:	ce 01       	movw	r24, r28
     cdc:	8a 5b       	subi	r24, 0xBA	; 186
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	2b 96       	adiw	r28, 0x0b	; 11
     ce2:	9f af       	std	Y+63, r25	; 0x3f
     ce4:	8e af       	std	Y+62, r24	; 0x3e
     ce6:	2b 97       	sbiw	r28, 0x0b	; 11
     ce8:	88 e6       	ldi	r24, 0x68	; 104
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2d 96       	adiw	r28, 0x0d	; 13
     cee:	9f af       	std	Y+63, r25	; 0x3f
     cf0:	8e af       	std	Y+62, r24	; 0x3e
     cf2:	2d 97       	sbiw	r28, 0x0d	; 13
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	2e 96       	adiw	r28, 0x0e	; 14
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	2e 97       	sbiw	r28, 0x0e	; 14
     cfc:	2d 96       	adiw	r28, 0x0d	; 13
     cfe:	ee ad       	ldd	r30, Y+62	; 0x3e
     d00:	ff ad       	ldd	r31, Y+63	; 0x3f
     d02:	2d 97       	sbiw	r28, 0x0d	; 13
     d04:	00 80       	ld	r0, Z
     d06:	2d 96       	adiw	r28, 0x0d	; 13
     d08:	8e ad       	ldd	r24, Y+62	; 0x3e
     d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     d0c:	2d 97       	sbiw	r28, 0x0d	; 13
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	2d 96       	adiw	r28, 0x0d	; 13
     d12:	9f af       	std	Y+63, r25	; 0x3f
     d14:	8e af       	std	Y+62, r24	; 0x3e
     d16:	2d 97       	sbiw	r28, 0x0d	; 13
     d18:	2b 96       	adiw	r28, 0x0b	; 11
     d1a:	ee ad       	ldd	r30, Y+62	; 0x3e
     d1c:	ff ad       	ldd	r31, Y+63	; 0x3f
     d1e:	2b 97       	sbiw	r28, 0x0b	; 11
     d20:	00 82       	st	Z, r0
     d22:	2b 96       	adiw	r28, 0x0b	; 11
     d24:	8e ad       	ldd	r24, Y+62	; 0x3e
     d26:	9f ad       	ldd	r25, Y+63	; 0x3f
     d28:	2b 97       	sbiw	r28, 0x0b	; 11
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	2b 96       	adiw	r28, 0x0b	; 11
     d2e:	9f af       	std	Y+63, r25	; 0x3f
     d30:	8e af       	std	Y+62, r24	; 0x3e
     d32:	2b 97       	sbiw	r28, 0x0b	; 11
     d34:	2e 96       	adiw	r28, 0x0e	; 14
     d36:	9f ad       	ldd	r25, Y+63	; 0x3f
     d38:	2e 97       	sbiw	r28, 0x0e	; 14
     d3a:	91 50       	subi	r25, 0x01	; 1
     d3c:	2e 96       	adiw	r28, 0x0e	; 14
     d3e:	9f af       	std	Y+63, r25	; 0x3f
     d40:	2e 97       	sbiw	r28, 0x0e	; 14
     d42:	2e 96       	adiw	r28, 0x0e	; 14
     d44:	ef ad       	ldd	r30, Y+63	; 0x3f
     d46:	2e 97       	sbiw	r28, 0x0e	; 14
     d48:	ee 23       	and	r30, r30
     d4a:	c1 f6       	brne	.-80     	; 0xcfc <main+0x48>
	//*********************************** Initializing drivers ********************************
	TWI_init();
     d4c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <TWI_init>
	UART_init(&UART_Config);
     d50:	ce 01       	movw	r24, r28
     d52:	8a 5b       	subi	r24, 0xBA	; 186
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	0e 94 a1 10 	call	0x2142	; 0x2142 <UART_init>
	EEPROM_init();
     d5a:	0e 94 8c 09 	call	0x1318	; 0x1318 <EEPROM_init>
	SREG |= (1<<7);
     d5e:	af e5       	ldi	r26, 0x5F	; 95
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ef e5       	ldi	r30, 0x5F	; 95
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	8c 93       	st	X, r24
	DCMOTOR_Init();
     d6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DCMOTOR_Init>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a8 e4       	ldi	r26, 0x48	; 72
     d76:	b2 e4       	ldi	r27, 0x42	; 66
     d78:	8f a3       	std	Y+39, r24	; 0x27
     d7a:	98 a7       	std	Y+40, r25	; 0x28
     d7c:	a9 a7       	std	Y+41, r26	; 0x29
     d7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d80:	6f a1       	ldd	r22, Y+39	; 0x27
     d82:	78 a5       	ldd	r23, Y+40	; 0x28
     d84:	89 a5       	ldd	r24, Y+41	; 0x29
     d86:	9a a5       	ldd	r25, Y+42	; 0x2a
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4a ef       	ldi	r20, 0xFA	; 250
     d8e:	54 e4       	ldi	r21, 0x44	; 68
     d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	8b a3       	std	Y+35, r24	; 0x23
     d9a:	9c a3       	std	Y+36, r25	; 0x24
     d9c:	ad a3       	std	Y+37, r26	; 0x25
     d9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     da0:	6b a1       	ldd	r22, Y+35	; 0x23
     da2:	7c a1       	ldd	r23, Y+36	; 0x24
     da4:	8d a1       	ldd	r24, Y+37	; 0x25
     da6:	9e a1       	ldd	r25, Y+38	; 0x26
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e8       	ldi	r20, 0x80	; 128
     dae:	5f e3       	ldi	r21, 0x3F	; 63
     db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db4:	88 23       	and	r24, r24
     db6:	2c f4       	brge	.+10     	; 0xdc2 <main+0x10e>
		__ticks = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	9a a3       	std	Y+34, r25	; 0x22
     dbe:	89 a3       	std	Y+33, r24	; 0x21
     dc0:	3f c0       	rjmp	.+126    	; 0xe40 <main+0x18c>
	else if (__tmp > 65535)
     dc2:	6b a1       	ldd	r22, Y+35	; 0x23
     dc4:	7c a1       	ldd	r23, Y+36	; 0x24
     dc6:	8d a1       	ldd	r24, Y+37	; 0x25
     dc8:	9e a1       	ldd	r25, Y+38	; 0x26
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	4c f5       	brge	.+82     	; 0xe2c <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	6f a1       	ldd	r22, Y+39	; 0x27
     ddc:	78 a5       	ldd	r23, Y+40	; 0x28
     dde:	89 a5       	ldd	r24, Y+41	; 0x29
     de0:	9a a5       	ldd	r25, Y+42	; 0x2a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	9a a3       	std	Y+34, r25	; 0x22
     e00:	89 a3       	std	Y+33, r24	; 0x21
     e02:	0f c0       	rjmp	.+30     	; 0xe22 <main+0x16e>
     e04:	88 ec       	ldi	r24, 0xC8	; 200
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	98 a3       	std	Y+32, r25	; 0x20
     e0a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e0e:	98 a1       	ldd	r25, Y+32	; 0x20
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <main+0x15c>
     e14:	98 a3       	std	Y+32, r25	; 0x20
     e16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e18:	89 a1       	ldd	r24, Y+33	; 0x21
     e1a:	9a a1       	ldd	r25, Y+34	; 0x22
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	9a a3       	std	Y+34, r25	; 0x22
     e20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e22:	89 a1       	ldd	r24, Y+33	; 0x21
     e24:	9a a1       	ldd	r25, Y+34	; 0x22
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	69 f7       	brne	.-38     	; 0xe04 <main+0x150>
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2c:	6b a1       	ldd	r22, Y+35	; 0x23
     e2e:	7c a1       	ldd	r23, Y+36	; 0x24
     e30:	8d a1       	ldd	r24, Y+37	; 0x25
     e32:	9e a1       	ldd	r25, Y+38	; 0x26
     e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9a a3       	std	Y+34, r25	; 0x22
     e3e:	89 a3       	std	Y+33, r24	; 0x21
     e40:	89 a1       	ldd	r24, Y+33	; 0x21
     e42:	9a a1       	ldd	r25, Y+34	; 0x22
     e44:	9e 8f       	std	Y+30, r25	; 0x1e
     e46:	8d 8f       	std	Y+29, r24	; 0x1d
     e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <main+0x198>
     e50:	9e 8f       	std	Y+30, r25	; 0x1e
     e52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);

	DDRD |= (1<<PD7);			// BUZZER output
     e54:	a1 e3       	ldi	r26, 0x31	; 49
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e3       	ldi	r30, 0x31	; 49
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	8c 93       	st	X, r24
	PORTD &= ~(1<<PD7);			// initially buzzer OFF
     e62:	a2 e3       	ldi	r26, 0x32	; 50
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e2 e3       	ldi	r30, 0x32	; 50
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 77       	andi	r24, 0x7F	; 127
     e6e:	8c 93       	st	X, r24
	while(1)
	{
		if(screen == 0)
     e70:	8f a5       	ldd	r24, Y+47	; 0x2f
     e72:	88 23       	and	r24, r24
     e74:	21 f5       	brne	.+72     	; 0xebe <main+0x20a>
		{
			state = UART_recieveByte();
     e76:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_recieveByte>
     e7a:	88 ab       	std	Y+48, r24	; 0x30
			if (state == SAVE_PASSWORD)
     e7c:	88 a9       	ldd	r24, Y+48	; 0x30
     e7e:	8b 30       	cpi	r24, 0x0B	; 11
     e80:	41 f4       	brne	.+16     	; 0xe92 <main+0x1de>
			{
				UART_receiveString(newPassword);
     e82:	ce 01       	movw	r24, r28
     e84:	c1 96       	adiw	r24, 0x31	; 49
     e86:	0e 94 47 11 	call	0x228e	; 0x228e <UART_receiveString>
				screen = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	8f a7       	std	Y+47, r24	; 0x2f
				state = 0;
     e8e:	18 aa       	std	Y+48, r1	; 0x30
     e90:	ef cf       	rjmp	.-34     	; 0xe70 <main+0x1bc>
			}

			else if (state == OPEN_DOOR)
     e92:	88 a9       	ldd	r24, Y+48	; 0x30
     e94:	8d 30       	cpi	r24, 0x0D	; 13
     e96:	41 f4       	brne	.+16     	; 0xea8 <main+0x1f4>
			{
				UART_receiveString(openPassword);
     e98:	ce 01       	movw	r24, r28
     e9a:	c6 96       	adiw	r24, 0x36	; 54
     e9c:	0e 94 47 11 	call	0x228e	; 0x228e <UART_receiveString>
				screen = 2;
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	8f a7       	std	Y+47, r24	; 0x2f
				state = 0;
     ea4:	18 aa       	std	Y+48, r1	; 0x30
     ea6:	e4 cf       	rjmp	.-56     	; 0xe70 <main+0x1bc>
			}
			else if (state == CHANGE_PASSWORD)
     ea8:	88 a9       	ldd	r24, Y+48	; 0x30
     eaa:	8e 30       	cpi	r24, 0x0E	; 14
     eac:	09 f7       	brne	.-62     	; 0xe70 <main+0x1bc>
			{
				UART_receiveString(openPassword);
     eae:	ce 01       	movw	r24, r28
     eb0:	c6 96       	adiw	r24, 0x36	; 54
     eb2:	0e 94 47 11 	call	0x228e	; 0x228e <UART_receiveString>
				screen = 3;
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	8f a7       	std	Y+47, r24	; 0x2f
				state = 0;
     eba:	18 aa       	std	Y+48, r1	; 0x30
     ebc:	d9 cf       	rjmp	.-78     	; 0xe70 <main+0x1bc>
			}

		}

		else if(screen == 1)
     ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <main+0x212>
     ec4:	9d c0       	rjmp	.+314    	; 0x1000 <main+0x34c>
		{
			sint8 i = 0 ;
     ec6:	1c a6       	std	Y+44, r1	; 0x2c
     ec8:	8b c0       	rjmp	.+278    	; 0xfe0 <main+0x32c>
			while (newPassword[i] != '\0')
			{
				 EEPROM_writeByte(FIRST_LOC_EEPROM +i , newPassword[i]);
     eca:	8c a5       	ldd	r24, Y+44	; 0x2c
     ecc:	99 27       	eor	r25, r25
     ece:	87 fd       	sbrc	r24, 7
     ed0:	90 95       	com	r25
     ed2:	8f 5e       	subi	r24, 0xEF	; 239
     ed4:	9c 4f       	sbci	r25, 0xFC	; 252
     ed6:	ac 01       	movw	r20, r24
     ed8:	8c a5       	ldd	r24, Y+44	; 0x2c
     eda:	28 2f       	mov	r18, r24
     edc:	33 27       	eor	r19, r19
     ede:	27 fd       	sbrc	r18, 7
     ee0:	30 95       	com	r19
     ee2:	ce 01       	movw	r24, r28
     ee4:	c1 96       	adiw	r24, 0x31	; 49
     ee6:	fc 01       	movw	r30, r24
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	20 81       	ld	r18, Z
     eee:	ca 01       	movw	r24, r20
     ef0:	62 2f       	mov	r22, r18
     ef2:	0e 94 95 09 	call	0x132a	; 0x132a <EEPROM_writeByte>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a8 e4       	ldi	r26, 0x48	; 72
     efc:	b2 e4       	ldi	r27, 0x42	; 66
     efe:	89 8f       	std	Y+25, r24	; 0x19
     f00:	9a 8f       	std	Y+26, r25	; 0x1a
     f02:	ab 8f       	std	Y+27, r26	; 0x1b
     f04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f06:	69 8d       	ldd	r22, Y+25	; 0x19
     f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a ef       	ldi	r20, 0xFA	; 250
     f14:	54 e4       	ldi	r21, 0x44	; 68
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8d 8b       	std	Y+21, r24	; 0x15
     f20:	9e 8b       	std	Y+22, r25	; 0x16
     f22:	af 8b       	std	Y+23, r26	; 0x17
     f24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f26:	6d 89       	ldd	r22, Y+21	; 0x15
     f28:	7e 89       	ldd	r23, Y+22	; 0x16
     f2a:	8f 89       	ldd	r24, Y+23	; 0x17
     f2c:	98 8d       	ldd	r25, Y+24	; 0x18
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <main+0x294>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9c 8b       	std	Y+20, r25	; 0x14
     f44:	8b 8b       	std	Y+19, r24	; 0x13
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <main+0x312>
	else if (__tmp > 65535)
     f48:	6d 89       	ldd	r22, Y+21	; 0x15
     f4a:	7e 89       	ldd	r23, Y+22	; 0x16
     f4c:	8f 89       	ldd	r24, Y+23	; 0x17
     f4e:	98 8d       	ldd	r25, Y+24	; 0x18
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <main+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	69 8d       	ldd	r22, Y+25	; 0x19
     f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9c 8b       	std	Y+20, r25	; 0x14
     f86:	8b 8b       	std	Y+19, r24	; 0x13
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <main+0x2f4>
     f8a:	88 ec       	ldi	r24, 0xC8	; 200
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9a 8b       	std	Y+18, r25	; 0x12
     f90:	89 8b       	std	Y+17, r24	; 0x11
     f92:	89 89       	ldd	r24, Y+17	; 0x11
     f94:	9a 89       	ldd	r25, Y+18	; 0x12
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <main+0x2e2>
     f9a:	9a 8b       	std	Y+18, r25	; 0x12
     f9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	8b 89       	ldd	r24, Y+19	; 0x13
     fa0:	9c 89       	ldd	r25, Y+20	; 0x14
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	9c 8b       	std	Y+20, r25	; 0x14
     fa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	8b 89       	ldd	r24, Y+19	; 0x13
     faa:	9c 89       	ldd	r25, Y+20	; 0x14
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	69 f7       	brne	.-38     	; 0xf8a <main+0x2d6>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	6d 89       	ldd	r22, Y+21	; 0x15
     fb4:	7e 89       	ldd	r23, Y+22	; 0x16
     fb6:	8f 89       	ldd	r24, Y+23	; 0x17
     fb8:	98 8d       	ldd	r25, Y+24	; 0x18
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9c 8b       	std	Y+20, r25	; 0x14
     fc4:	8b 8b       	std	Y+19, r24	; 0x13
     fc6:	8b 89       	ldd	r24, Y+19	; 0x13
     fc8:	9c 89       	ldd	r25, Y+20	; 0x14
     fca:	98 8b       	std	Y+16, r25	; 0x10
     fcc:	8f 87       	std	Y+15, r24	; 0x0f
     fce:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd0:	98 89       	ldd	r25, Y+16	; 0x10
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <main+0x31e>
     fd6:	98 8b       	std	Y+16, r25	; 0x10
     fd8:	8f 87       	std	Y+15, r24	; 0x0f
				 _delay_ms(50);
				 i++;
     fda:	8c a5       	ldd	r24, Y+44	; 0x2c
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	8c a7       	std	Y+44, r24	; 0x2c
		}

		else if(screen == 1)
		{
			sint8 i = 0 ;
			while (newPassword[i] != '\0')
     fe0:	8c a5       	ldd	r24, Y+44	; 0x2c
     fe2:	28 2f       	mov	r18, r24
     fe4:	33 27       	eor	r19, r19
     fe6:	27 fd       	sbrc	r18, 7
     fe8:	30 95       	com	r19
     fea:	ce 01       	movw	r24, r28
     fec:	c1 96       	adiw	r24, 0x31	; 49
     fee:	fc 01       	movw	r30, r24
     ff0:	e2 0f       	add	r30, r18
     ff2:	f3 1f       	adc	r31, r19
     ff4:	80 81       	ld	r24, Z
     ff6:	88 23       	and	r24, r24
     ff8:	09 f0       	breq	.+2      	; 0xffc <main+0x348>
     ffa:	67 cf       	rjmp	.-306    	; 0xeca <main+0x216>
			{
				 EEPROM_writeByte(FIRST_LOC_EEPROM +i , newPassword[i]);
				 _delay_ms(50);
				 i++;
			}
			screen = 0;
     ffc:	1f a6       	std	Y+47, r1	; 0x2f
     ffe:	38 cf       	rjmp	.-400    	; 0xe70 <main+0x1bc>
		}
		else if(screen == 2)
    1000:	8f a5       	ldd	r24, Y+47	; 0x2f
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	09 f0       	breq	.+2      	; 0x1008 <main+0x354>
    1006:	59 c0       	rjmp	.+178    	; 0x10ba <main+0x406>
		{
			EEPROM_readPassword(buffer,N);
    1008:	ce 01       	movw	r24, r28
    100a:	80 5c       	subi	r24, 0xC0	; 192
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	65 e0       	ldi	r22, 0x05	; 5
    1010:	0e 94 36 0a 	call	0x146c	; 0x146c <EEPROM_readPassword>
			checkPassword = PW_checkPassword(buffer , openPassword);
    1014:	ce 01       	movw	r24, r28
    1016:	80 5c       	subi	r24, 0xC0	; 192
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	9e 01       	movw	r18, r28
    101c:	2a 5c       	subi	r18, 0xCA	; 202
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	b9 01       	movw	r22, r18
    1022:	0e 94 1e 10 	call	0x203c	; 0x203c <PW_checkPassword>
    1026:	8e a7       	std	Y+46, r24	; 0x2e
			if(checkPassword == TRUE)
    1028:	8e a5       	ldd	r24, Y+46	; 0x2e
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	11 f5       	brne	.+68     	; 0x1072 <main+0x3be>
			{
				UART_sendByte(CORRECT_PW);
    102e:	8f e0       	ldi	r24, 0x0F	; 15
    1030:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <UART_sendByte>
				DCMOTOR_onClockWise(MED_SPEED);
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	9e e4       	ldi	r25, 0x4E	; 78
    1038:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DCMOTOR_onClockWise>
				timer0_init_normal_mode(&Timer0_Config);
    103c:	ce 01       	movw	r24, r28
    103e:	8b 5b       	subi	r24, 0xBB	; 187
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	0e 94 64 09 	call	0x12c8	; 0x12c8 <timer0_init_normal_mode>
				while(seconds != 10);
    1046:	80 91 6c 00 	lds	r24, 0x006C
    104a:	8a 30       	cpi	r24, 0x0A	; 10
    104c:	e1 f7       	brne	.-8      	; 0x1046 <main+0x392>
				DCMOTOR_onAntiClockWise(MED_SPEED);
    104e:	80 e2       	ldi	r24, 0x20	; 32
    1050:	9e e4       	ldi	r25, 0x4E	; 78
    1052:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DCMOTOR_onAntiClockWise>
				timer0_init_normal_mode(&Timer0_Config);
    1056:	ce 01       	movw	r24, r28
    1058:	8b 5b       	subi	r24, 0xBB	; 187
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <timer0_init_normal_mode>
				while(seconds != 10);
    1060:	80 91 6c 00 	lds	r24, 0x006C
    1064:	8a 30       	cpi	r24, 0x0A	; 10
    1066:	e1 f7       	brne	.-8      	; 0x1060 <main+0x3ac>
				DCMOTOR_stop();
    1068:	0e 94 3f 06 	call	0xc7e	; 0xc7e <DCMOTOR_stop>
				wrongCount = 0;
    106c:	1d a6       	std	Y+45, r1	; 0x2d
				screen = 0;
    106e:	1f a6       	std	Y+47, r1	; 0x2f
    1070:	ff ce       	rjmp	.-514    	; 0xe70 <main+0x1bc>

			}
			else
			{
				UART_sendByte(WRONG_PASSWORD);
    1072:	8c e0       	ldi	r24, 0x0C	; 12
    1074:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <UART_sendByte>
				wrongCount++;
    1078:	8d a5       	ldd	r24, Y+45	; 0x2d
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	8d a7       	std	Y+45, r24	; 0x2d
				if(wrongCount == 3)
    107e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	c9 f4       	brne	.+50     	; 0x10b6 <main+0x402>
				{
					PORTD |= (1<<PD7);
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 68       	ori	r24, 0x80	; 128
    1090:	8c 93       	st	X, r24
					timer0_init_normal_mode(&Timer0_Config);
    1092:	ce 01       	movw	r24, r28
    1094:	8b 5b       	subi	r24, 0xBB	; 187
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	0e 94 64 09 	call	0x12c8	; 0x12c8 <timer0_init_normal_mode>
					while(seconds != 10);
    109c:	80 91 6c 00 	lds	r24, 0x006C
    10a0:	8a 30       	cpi	r24, 0x0A	; 10
    10a2:	e1 f7       	brne	.-8      	; 0x109c <main+0x3e8>
					PORTD &= ~(1<<PD7);
    10a4:	a2 e3       	ldi	r26, 0x32	; 50
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e2 e3       	ldi	r30, 0x32	; 50
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 77       	andi	r24, 0x7F	; 127
    10b0:	8c 93       	st	X, r24
					wrongCount = 0;
    10b2:	1d a6       	std	Y+45, r1	; 0x2d
					screen = 0;
    10b4:	1f a6       	std	Y+47, r1	; 0x2f
				}
				screen = 0;
    10b6:	1f a6       	std	Y+47, r1	; 0x2f
    10b8:	db ce       	rjmp	.-586    	; 0xe70 <main+0x1bc>
			}

		}
		else if (screen == 3)
    10ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	09 f0       	breq	.+2      	; 0x10c2 <main+0x40e>
    10c0:	d7 ce       	rjmp	.-594    	; 0xe70 <main+0x1bc>
		{
			EEPROM_readPassword(buffer,N);
    10c2:	ce 01       	movw	r24, r28
    10c4:	80 5c       	subi	r24, 0xC0	; 192
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	65 e0       	ldi	r22, 0x05	; 5
    10ca:	0e 94 36 0a 	call	0x146c	; 0x146c <EEPROM_readPassword>
			checkPassword = PW_checkPassword(buffer , openPassword);
    10ce:	ce 01       	movw	r24, r28
    10d0:	80 5c       	subi	r24, 0xC0	; 192
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	9e 01       	movw	r18, r28
    10d6:	2a 5c       	subi	r18, 0xCA	; 202
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	b9 01       	movw	r22, r18
    10dc:	0e 94 1e 10 	call	0x203c	; 0x203c <PW_checkPassword>
    10e0:	8e a7       	std	Y+46, r24	; 0x2e
			if(checkPassword == TRUE)
    10e2:	8e a5       	ldd	r24, Y+46	; 0x2e
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <main+0x436>
    10e8:	a9 c0       	rjmp	.+338    	; 0x123c <main+0x588>
			{
				UART_sendByte(CORRECT_PW);
    10ea:	8f e0       	ldi	r24, 0x0F	; 15
    10ec:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <UART_sendByte>
				while(UART_recieveByte() != NEW_PASSWORD );
    10f0:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_recieveByte>
    10f4:	80 31       	cpi	r24, 0x10	; 16
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <main+0x43c>
				UART_receiveString(changePassword);
    10f8:	ce 01       	movw	r24, r28
    10fa:	cb 96       	adiw	r24, 0x3b	; 59
    10fc:	0e 94 47 11 	call	0x228e	; 0x228e <UART_receiveString>
				sint8 i = 0 ;
    1100:	1b a6       	std	Y+43, r1	; 0x2b
    1102:	8b c0       	rjmp	.+278    	; 0x121a <main+0x566>
				while (changePassword[i] != '\0')
				{
					 EEPROM_writeByte(FIRST_LOC_EEPROM +i , changePassword[i]);
    1104:	8b a5       	ldd	r24, Y+43	; 0x2b
    1106:	99 27       	eor	r25, r25
    1108:	87 fd       	sbrc	r24, 7
    110a:	90 95       	com	r25
    110c:	8f 5e       	subi	r24, 0xEF	; 239
    110e:	9c 4f       	sbci	r25, 0xFC	; 252
    1110:	ac 01       	movw	r20, r24
    1112:	8b a5       	ldd	r24, Y+43	; 0x2b
    1114:	28 2f       	mov	r18, r24
    1116:	33 27       	eor	r19, r19
    1118:	27 fd       	sbrc	r18, 7
    111a:	30 95       	com	r19
    111c:	ce 01       	movw	r24, r28
    111e:	cb 96       	adiw	r24, 0x3b	; 59
    1120:	fc 01       	movw	r30, r24
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	20 81       	ld	r18, Z
    1128:	ca 01       	movw	r24, r20
    112a:	62 2f       	mov	r22, r18
    112c:	0e 94 95 09 	call	0x132a	; 0x132a <EEPROM_writeByte>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a8 e4       	ldi	r26, 0x48	; 72
    1136:	b2 e4       	ldi	r27, 0x42	; 66
    1138:	8b 87       	std	Y+11, r24	; 0x0b
    113a:	9c 87       	std	Y+12, r25	; 0x0c
    113c:	ad 87       	std	Y+13, r26	; 0x0d
    113e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1140:	6b 85       	ldd	r22, Y+11	; 0x0b
    1142:	7c 85       	ldd	r23, Y+12	; 0x0c
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	9e 85       	ldd	r25, Y+14	; 0x0e
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a ef       	ldi	r20, 0xFA	; 250
    114e:	54 e4       	ldi	r21, 0x44	; 68
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	8f 83       	std	Y+7, r24	; 0x07
    115a:	98 87       	std	Y+8, r25	; 0x08
    115c:	a9 87       	std	Y+9, r26	; 0x09
    115e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1160:	6f 81       	ldd	r22, Y+7	; 0x07
    1162:	78 85       	ldd	r23, Y+8	; 0x08
    1164:	89 85       	ldd	r24, Y+9	; 0x09
    1166:	9a 85       	ldd	r25, Y+10	; 0x0a
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <main+0x4ce>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <main+0x54c>
	else if (__tmp > 65535)
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	4c f5       	brge	.+82     	; 0x11ec <main+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	6b 85       	ldd	r22, Y+11	; 0x0b
    119c:	7c 85       	ldd	r23, Y+12	; 0x0c
    119e:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <main+0x52e>
    11c4:	88 ec       	ldi	r24, 0xC8	; 200
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9c 83       	std	Y+4, r25	; 0x04
    11ca:	8b 83       	std	Y+3, r24	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <main+0x51c>
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	69 f7       	brne	.-38     	; 0x11c4 <main+0x510>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <main+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <main+0x558>
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
					 _delay_ms(50);
					 i++;
    1214:	8b a5       	ldd	r24, Y+43	; 0x2b
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	8b a7       	std	Y+43, r24	; 0x2b
			{
				UART_sendByte(CORRECT_PW);
				while(UART_recieveByte() != NEW_PASSWORD );
				UART_receiveString(changePassword);
				sint8 i = 0 ;
				while (changePassword[i] != '\0')
    121a:	8b a5       	ldd	r24, Y+43	; 0x2b
    121c:	28 2f       	mov	r18, r24
    121e:	33 27       	eor	r19, r19
    1220:	27 fd       	sbrc	r18, 7
    1222:	30 95       	com	r19
    1224:	ce 01       	movw	r24, r28
    1226:	cb 96       	adiw	r24, 0x3b	; 59
    1228:	fc 01       	movw	r30, r24
    122a:	e2 0f       	add	r30, r18
    122c:	f3 1f       	adc	r31, r19
    122e:	80 81       	ld	r24, Z
    1230:	88 23       	and	r24, r24
    1232:	09 f0       	breq	.+2      	; 0x1236 <main+0x582>
    1234:	67 cf       	rjmp	.-306    	; 0x1104 <main+0x450>
				{
					 EEPROM_writeByte(FIRST_LOC_EEPROM +i , changePassword[i]);
					 _delay_ms(50);
					 i++;
				}
				wrongCount = 0;
    1236:	1d a6       	std	Y+45, r1	; 0x2d
				screen = 0;
    1238:	1f a6       	std	Y+47, r1	; 0x2f
    123a:	1a ce       	rjmp	.-972    	; 0xe70 <main+0x1bc>
			}
			else
			{
				UART_sendByte(WRONG_PASSWORD);
    123c:	8c e0       	ldi	r24, 0x0C	; 12
    123e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <UART_sendByte>
				wrongCount++;
    1242:	8d a5       	ldd	r24, Y+45	; 0x2d
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	8d a7       	std	Y+45, r24	; 0x2d
				if(wrongCount == 3)
    1248:	8d a5       	ldd	r24, Y+45	; 0x2d
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	c9 f4       	brne	.+50     	; 0x1280 <main+0x5cc>
				{
					PORTD |= (1<<PD7);
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	8c 93       	st	X, r24
					timer0_init_normal_mode(&Timer0_Config);
    125c:	ce 01       	movw	r24, r28
    125e:	8b 5b       	subi	r24, 0xBB	; 187
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	0e 94 64 09 	call	0x12c8	; 0x12c8 <timer0_init_normal_mode>
					while(seconds != 10);
    1266:	80 91 6c 00 	lds	r24, 0x006C
    126a:	8a 30       	cpi	r24, 0x0A	; 10
    126c:	e1 f7       	brne	.-8      	; 0x1266 <main+0x5b2>
					PORTD &= ~(1<<PD7);
    126e:	a2 e3       	ldi	r26, 0x32	; 50
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e2 e3       	ldi	r30, 0x32	; 50
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 77       	andi	r24, 0x7F	; 127
    127a:	8c 93       	st	X, r24
					wrongCount = 0;
    127c:	1d a6       	std	Y+45, r1	; 0x2d
					screen = 0;
    127e:	1f a6       	std	Y+47, r1	; 0x2f
				}
			screen = 0;
    1280:	1f a6       	std	Y+47, r1	; 0x2f
    1282:	f6 cd       	rjmp	.-1044   	; 0xe70 <main+0x1bc>

00001284 <__vector_9>:
/************************************** interrupt Routine Service *****************************
 *
 ********************************************************************************************/
// every 144 interrupt will happen it will be one second
ISR(TIMER0_OVF_vect)
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	8f 93       	push	r24
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1298:	80 91 6d 00 	lds	r24, 0x006D
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	80 93 6d 00 	sts	0x006D, r24
	if(g_tick == NUMBER_OF_OVS_PER_SECOND)
    12a2:	80 91 6d 00 	lds	r24, 0x006D
    12a6:	80 39       	cpi	r24, 0x90	; 144
    12a8:	39 f4       	brne	.+14     	; 0x12b8 <__vector_9+0x34>
	{
		seconds++;
    12aa:	80 91 6c 00 	lds	r24, 0x006C
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	80 93 6c 00 	sts	0x006C, r24
		g_tick = 0;
    12b4:	10 92 6d 00 	sts	0x006D, r1
	}
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	8f 91       	pop	r24
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <timer0_init_normal_mode>:
 * For clock=8Mhz and prescale F_CPU/256 every count will take 32micro second
 * so put initial timer counter = 0  0 --> 255 (8.192ms per overflow)
 * so we need timer to overflow 144 times to count 1 second
 */
void timer0_init_normal_mode(Timer0_ConfigType *Config_Ptr)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <timer0_init_normal_mode+0x6>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer initial value to 0
    12d6:	e2 e5       	ldi	r30, 0x52	; 82
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	10 82       	st	Z, r1
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    12dc:	a9 e5       	ldi	r26, 0x59	; 89
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e9 e5       	ldi	r30, 0x59	; 89
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	8c 93       	st	X, r24
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 	  configurable Cock
	 */

	TCCR0 = (1<<FOC0) ;
    12ea:	e3 e5       	ldi	r30, 0x53	; 83
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 e8       	ldi	r24, 0x80	; 128
    12f0:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    12f2:	a3 e5       	ldi	r26, 0x53	; 83
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e3 e5       	ldi	r30, 0x53	; 83
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	98 2f       	mov	r25, r24
    12fe:	98 7f       	andi	r25, 0xF8	; 248
    1300:	e9 81       	ldd	r30, Y+1	; 0x01
    1302:	fa 81       	ldd	r31, Y+2	; 0x02
    1304:	80 81       	ld	r24, Z
    1306:	89 2b       	or	r24, r25
    1308:	8c 93       	st	X, r24
	seconds = 0;			// every time Timer0 initialize seconds will be zero
    130a:	10 92 6c 00 	sts	0x006C, r1
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1320:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <TWI_init>
}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <EEPROM_writeByte+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <EEPROM_writeByte+0x8>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    133c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1340:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	11 f0       	breq	.+4      	; 0x134c <EEPROM_writeByte+0x22>
        return ERROR;
    1348:	1c 82       	std	Y+4, r1	; 0x04
    134a:	28 c0       	rjmp	.+80     	; 0x139c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	80 70       	andi	r24, 0x00	; 0
    1352:	97 70       	andi	r25, 0x07	; 7
    1354:	88 0f       	add	r24, r24
    1356:	89 2f       	mov	r24, r25
    1358:	88 1f       	adc	r24, r24
    135a:	99 0b       	sbc	r25, r25
    135c:	91 95       	neg	r25
    135e:	80 6a       	ori	r24, 0xA0	; 160
    1360:	0e 94 0e 0b 	call	0x161c	; 0x161c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1364:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    1368:	88 31       	cpi	r24, 0x18	; 24
    136a:	11 f0       	breq	.+4      	; 0x1370 <EEPROM_writeByte+0x46>
        return ERROR; 
    136c:	1c 82       	std	Y+4, r1	; 0x04
    136e:	16 c0       	rjmp	.+44     	; 0x139c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	0e 94 0e 0b 	call	0x161c	; 0x161c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1376:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    137a:	88 32       	cpi	r24, 0x28	; 40
    137c:	11 f0       	breq	.+4      	; 0x1382 <EEPROM_writeByte+0x58>
        return ERROR;
    137e:	1c 82       	std	Y+4, r1	; 0x04
    1380:	0d c0       	rjmp	.+26     	; 0x139c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	0e 94 0e 0b 	call	0x161c	; 0x161c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1388:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    138c:	88 32       	cpi	r24, 0x28	; 40
    138e:	11 f0       	breq	.+4      	; 0x1394 <EEPROM_writeByte+0x6a>
        return ERROR;
    1390:	1c 82       	std	Y+4, r1	; 0x04
    1392:	04 c0       	rjmp	.+8      	; 0x139c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1394:	0e 94 03 0b 	call	0x1606	; 0x1606 <TWI_stop>
	
    return SUCCESS;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8c 83       	std	Y+4, r24	; 0x04
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <EEPROM_readByte+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <EEPROM_readByte+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	7c 83       	std	Y+4, r23	; 0x04
    13c0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13c2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_start>
    if (TWI_getStatus() != TW_START)
    13c6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <EEPROM_readByte+0x26>
        return ERROR;
    13ce:	1d 82       	std	Y+5, r1	; 0x05
    13d0:	44 c0       	rjmp	.+136    	; 0x145a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	80 70       	andi	r24, 0x00	; 0
    13d8:	97 70       	andi	r25, 0x07	; 7
    13da:	88 0f       	add	r24, r24
    13dc:	89 2f       	mov	r24, r25
    13de:	88 1f       	adc	r24, r24
    13e0:	99 0b       	sbc	r25, r25
    13e2:	91 95       	neg	r25
    13e4:	80 6a       	ori	r24, 0xA0	; 160
    13e6:	0e 94 0e 0b 	call	0x161c	; 0x161c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    13ea:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    13ee:	88 31       	cpi	r24, 0x18	; 24
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <EEPROM_readByte+0x4a>
        return ERROR;
    13f2:	1d 82       	std	Y+5, r1	; 0x05
    13f4:	32 c0       	rjmp	.+100    	; 0x145a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	0e 94 0e 0b 	call	0x161c	; 0x161c <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    13fc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    1400:	88 32       	cpi	r24, 0x28	; 40
    1402:	11 f0       	breq	.+4      	; 0x1408 <EEPROM_readByte+0x5c>
        return ERROR;
    1404:	1d 82       	std	Y+5, r1	; 0x05
    1406:	29 c0       	rjmp	.+82     	; 0x145a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1408:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    140c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    1410:	80 31       	cpi	r24, 0x10	; 16
    1412:	11 f0       	breq	.+4      	; 0x1418 <EEPROM_readByte+0x6c>
        return ERROR;
    1414:	1d 82       	std	Y+5, r1	; 0x05
    1416:	21 c0       	rjmp	.+66     	; 0x145a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	80 70       	andi	r24, 0x00	; 0
    141e:	97 70       	andi	r25, 0x07	; 7
    1420:	88 0f       	add	r24, r24
    1422:	89 2f       	mov	r24, r25
    1424:	88 1f       	adc	r24, r24
    1426:	99 0b       	sbc	r25, r25
    1428:	91 95       	neg	r25
    142a:	81 6a       	ori	r24, 0xA1	; 161
    142c:	0e 94 0e 0b 	call	0x161c	; 0x161c <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1430:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    1434:	80 34       	cpi	r24, 0x40	; 64
    1436:	11 f0       	breq	.+4      	; 0x143c <EEPROM_readByte+0x90>
        return ERROR;
    1438:	1d 82       	std	Y+5, r1	; 0x05
    143a:	0f c0       	rjmp	.+30     	; 0x145a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    143c:	0e 94 38 0b 	call	0x1670	; 0x1670 <TWI_readWithNACK>
    1440:	eb 81       	ldd	r30, Y+3	; 0x03
    1442:	fc 81       	ldd	r31, Y+4	; 0x04
    1444:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1446:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_getStatus>
    144a:	88 35       	cpi	r24, 0x58	; 88
    144c:	11 f0       	breq	.+4      	; 0x1452 <EEPROM_readByte+0xa6>
        return ERROR;
    144e:	1d 82       	std	Y+5, r1	; 0x05
    1450:	04 c0       	rjmp	.+8      	; 0x145a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1452:	0e 94 03 0b 	call	0x1606	; 0x1606 <TWI_stop>
    return SUCCESS;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <EEPROM_readPassword>:
void EEPROM_readPassword(uint8 buffer[],uint8 k)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	63 97       	sbiw	r28, 0x13	; 19
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	9a 8b       	std	Y+18, r25	; 0x12
    1482:	89 8b       	std	Y+17, r24	; 0x11
    1484:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 read;
	for(uint8 i = 0; i < k ;i++)
    1486:	1f 86       	std	Y+15, r1	; 0x0f
    1488:	8a c0       	rjmp	.+276    	; 0x159e <EEPROM_readPassword+0x132>
	{
		EEPROM_readByte(FIRST_LOC_EEPROM + i, &read);
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	8f 5e       	subi	r24, 0xEF	; 239
    1492:	9c 4f       	sbci	r25, 0xFC	; 252
    1494:	9e 01       	movw	r18, r28
    1496:	20 5f       	subi	r18, 0xF0	; 240
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	b9 01       	movw	r22, r18
    149c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <EEPROM_readByte>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a8 e4       	ldi	r26, 0x48	; 72
    14a6:	b2 e4       	ldi	r27, 0x42	; 66
    14a8:	8b 87       	std	Y+11, r24	; 0x0b
    14aa:	9c 87       	std	Y+12, r25	; 0x0c
    14ac:	ad 87       	std	Y+13, r26	; 0x0d
    14ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	4a ef       	ldi	r20, 0xFA	; 250
    14be:	54 e4       	ldi	r21, 0x44	; 68
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8f 83       	std	Y+7, r24	; 0x07
    14ca:	98 87       	std	Y+8, r25	; 0x08
    14cc:	a9 87       	std	Y+9, r26	; 0x09
    14ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d0:	6f 81       	ldd	r22, Y+7	; 0x07
    14d2:	78 85       	ldd	r23, Y+8	; 0x08
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <EEPROM_readPassword+0x86>
		__ticks = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 83       	std	Y+5, r24	; 0x05
    14f0:	3f c0       	rjmp	.+126    	; 0x1570 <EEPROM_readPassword+0x104>
	else if (__tmp > 65535)
    14f2:	6f 81       	ldd	r22, Y+7	; 0x07
    14f4:	78 85       	ldd	r23, Y+8	; 0x08
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1506:	18 16       	cp	r1, r24
    1508:	4c f5       	brge	.+82     	; 0x155c <EEPROM_readPassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150a:	6b 85       	ldd	r22, Y+11	; 0x0b
    150c:	7c 85       	ldd	r23, Y+12	; 0x0c
    150e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1510:	9e 85       	ldd	r25, Y+14	; 0x0e
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	0f c0       	rjmp	.+30     	; 0x1552 <EEPROM_readPassword+0xe6>
    1534:	88 ec       	ldi	r24, 0xC8	; 200
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	8b 83       	std	Y+3, r24	; 0x03
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <EEPROM_readPassword+0xd4>
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	69 f7       	brne	.-38     	; 0x1534 <EEPROM_readPassword+0xc8>
    155a:	14 c0       	rjmp	.+40     	; 0x1584 <EEPROM_readPassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <EEPROM_readPassword+0x110>
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		buffer[i] = read;
    1584:	8f 85       	ldd	r24, Y+15	; 0x0f
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	89 89       	ldd	r24, Y+17	; 0x11
    158c:	9a 89       	ldd	r25, Y+18	; 0x12
    158e:	fc 01       	movw	r30, r24
    1590:	e2 0f       	add	r30, r18
    1592:	f3 1f       	adc	r31, r19
    1594:	88 89       	ldd	r24, Y+16	; 0x10
    1596:	80 83       	st	Z, r24
    return SUCCESS;
}
void EEPROM_readPassword(uint8 buffer[],uint8 k)
{
	uint8 read;
	for(uint8 i = 0; i < k ;i++)
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	8f 87       	std	Y+15, r24	; 0x0f
    159e:	9f 85       	ldd	r25, Y+15	; 0x0f
    15a0:	8b 89       	ldd	r24, Y+19	; 0x13
    15a2:	98 17       	cp	r25, r24
    15a4:	08 f4       	brcc	.+2      	; 0x15a8 <EEPROM_readPassword+0x13c>
    15a6:	71 cf       	rjmp	.-286    	; 0x148a <EEPROM_readPassword+0x1e>
	{
		EEPROM_readByte(FIRST_LOC_EEPROM + i, &read);
		_delay_ms(50);
		buffer[i] = read;
	}
}
    15a8:	63 96       	adiw	r28, 0x13	; 19
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    15c2:	e0 e2       	ldi	r30, 0x20	; 32
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	80 83       	st	Z, r24
	TWSR = 0x00;
    15ca:	e1 e2       	ldi	r30, 0x21	; 33
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    15d0:	e2 e2       	ldi	r30, 0x22	; 34
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    15d8:	e6 e5       	ldi	r30, 0x56	; 86
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	84 e0       	ldi	r24, 0x04	; 4
    15de:	80 83       	st	Z, r24
}
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <TWI_start>:

void TWI_start(void)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    15ee:	e6 e5       	ldi	r30, 0x56	; 86
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	84 ea       	ldi	r24, 0xA4	; 164
    15f4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    15f6:	e6 e5       	ldi	r30, 0x56	; 86
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	dc f7       	brge	.-10     	; 0x15f6 <TWI_start+0x10>
}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <TWI_stop>:

void TWI_stop(void)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    160e:	e6 e5       	ldi	r30, 0x56	; 86
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	84 e9       	ldi	r24, 0x94	; 148
    1614:	80 83       	st	Z, r24
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <TWI_write>:

void TWI_write(uint8 data)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	0f 92       	push	r0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1628:	e3 e2       	ldi	r30, 0x23	; 35
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1630:	e6 e5       	ldi	r30, 0x56	; 86
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	84 e8       	ldi	r24, 0x84	; 132
    1636:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1638:	e6 e5       	ldi	r30, 0x56	; 86
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 23       	and	r24, r24
    1640:	dc f7       	brge	.-10     	; 0x1638 <TWI_write+0x1c>
}
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1652:	e6 e5       	ldi	r30, 0x56	; 86
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	84 ec       	ldi	r24, 0xC4	; 196
    1658:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    165a:	e6 e5       	ldi	r30, 0x56	; 86
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 23       	and	r24, r24
    1662:	dc f7       	brge	.-10     	; 0x165a <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1664:	e3 e2       	ldi	r30, 0x23	; 35
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1678:	e6 e5       	ldi	r30, 0x56	; 86
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	84 e8       	ldi	r24, 0x84	; 132
    167e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1680:	e6 e5       	ldi	r30, 0x56	; 86
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	88 23       	and	r24, r24
    1688:	dc f7       	brge	.-10     	; 0x1680 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    168a:	e3 e2       	ldi	r30, 0x23	; 35
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
}
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	0f 92       	push	r0
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    16a0:	e1 e2       	ldi	r30, 0x21	; 33
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 7f       	andi	r24, 0xF8	; 248
    16a8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    16bc:	ea e3       	ldi	r30, 0x3A	; 58
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    16c4:	a7 e3       	ldi	r26, 0x37	; 55
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e7 e3       	ldi	r30, 0x37	; 55
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	87 60       	ori	r24, 0x07	; 7
    16d0:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    16d2:	88 e3       	ldi	r24, 0x38	; 56
    16d4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    16d8:	8c e0       	ldi	r24, 0x0C	; 12
    16da:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	e9 97       	sbiw	r28, 0x39	; 57
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1700:	a8 e3       	ldi	r26, 0x38	; 56
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8e 7f       	andi	r24, 0xFE	; 254
    170c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    170e:	a8 e3       	ldi	r26, 0x38	; 56
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e8 e3       	ldi	r30, 0x38	; 56
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8d 7f       	andi	r24, 0xFD	; 253
    171a:	8c 93       	st	X, r24
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e8       	ldi	r26, 0x80	; 128
    1722:	bf e3       	ldi	r27, 0x3F	; 63
    1724:	8d ab       	std	Y+53, r24	; 0x35
    1726:	9e ab       	std	Y+54, r25	; 0x36
    1728:	af ab       	std	Y+55, r26	; 0x37
    172a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172c:	6d a9       	ldd	r22, Y+53	; 0x35
    172e:	7e a9       	ldd	r23, Y+54	; 0x36
    1730:	8f a9       	ldd	r24, Y+55	; 0x37
    1732:	98 ad       	ldd	r25, Y+56	; 0x38
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a ef       	ldi	r20, 0xFA	; 250
    173a:	54 e4       	ldi	r21, 0x44	; 68
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	89 ab       	std	Y+49, r24	; 0x31
    1746:	9a ab       	std	Y+50, r25	; 0x32
    1748:	ab ab       	std	Y+51, r26	; 0x33
    174a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    174c:	69 a9       	ldd	r22, Y+49	; 0x31
    174e:	7a a9       	ldd	r23, Y+50	; 0x32
    1750:	8b a9       	ldd	r24, Y+51	; 0x33
    1752:	9c a9       	ldd	r25, Y+52	; 0x34
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	2c f4       	brge	.+10     	; 0x176e <LCD_sendCommand+0x84>
		__ticks = 1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
    176c:	3f c0       	rjmp	.+126    	; 0x17ec <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    176e:	69 a9       	ldd	r22, Y+49	; 0x31
    1770:	7a a9       	ldd	r23, Y+50	; 0x32
    1772:	8b a9       	ldd	r24, Y+51	; 0x33
    1774:	9c a9       	ldd	r25, Y+52	; 0x34
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1782:	18 16       	cp	r1, r24
    1784:	4c f5       	brge	.+82     	; 0x17d8 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	6d a9       	ldd	r22, Y+53	; 0x35
    1788:	7e a9       	ldd	r23, Y+54	; 0x36
    178a:	8f a9       	ldd	r24, Y+55	; 0x37
    178c:	98 ad       	ldd	r25, Y+56	; 0x38
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	98 ab       	std	Y+48, r25	; 0x30
    17ac:	8f a7       	std	Y+47, r24	; 0x2f
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <LCD_sendCommand+0xe4>
    17b0:	88 ec       	ldi	r24, 0xC8	; 200
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9e a7       	std	Y+46, r25	; 0x2e
    17b6:	8d a7       	std	Y+45, r24	; 0x2d
    17b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    17ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_sendCommand+0xd2>
    17c0:	9e a7       	std	Y+46, r25	; 0x2e
    17c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c6:	98 a9       	ldd	r25, Y+48	; 0x30
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	98 ab       	std	Y+48, r25	; 0x30
    17cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d0:	98 a9       	ldd	r25, Y+48	; 0x30
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <LCD_sendCommand+0xc6>
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	69 a9       	ldd	r22, Y+49	; 0x31
    17da:	7a a9       	ldd	r23, Y+50	; 0x32
    17dc:	8b a9       	ldd	r24, Y+51	; 0x33
    17de:	9c a9       	ldd	r25, Y+52	; 0x34
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	98 ab       	std	Y+48, r25	; 0x30
    17ea:	8f a7       	std	Y+47, r24	; 0x2f
    17ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ee:	98 a9       	ldd	r25, Y+48	; 0x30
    17f0:	9c a7       	std	Y+44, r25	; 0x2c
    17f2:	8b a7       	std	Y+43, r24	; 0x2b
    17f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_sendCommand+0x10e>
    17fc:	9c a7       	std	Y+44, r25	; 0x2c
    17fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1800:	a8 e3       	ldi	r26, 0x38	; 56
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e8 e3       	ldi	r30, 0x38	; 56
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	84 60       	ori	r24, 0x04	; 4
    180c:	8c 93       	st	X, r24
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e8       	ldi	r26, 0x80	; 128
    1814:	bf e3       	ldi	r27, 0x3F	; 63
    1816:	8f a3       	std	Y+39, r24	; 0x27
    1818:	98 a7       	std	Y+40, r25	; 0x28
    181a:	a9 a7       	std	Y+41, r26	; 0x29
    181c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	6f a1       	ldd	r22, Y+39	; 0x27
    1820:	78 a5       	ldd	r23, Y+40	; 0x28
    1822:	89 a5       	ldd	r24, Y+41	; 0x29
    1824:	9a a5       	ldd	r25, Y+42	; 0x2a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a ef       	ldi	r20, 0xFA	; 250
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8b a3       	std	Y+35, r24	; 0x23
    1838:	9c a3       	std	Y+36, r25	; 0x24
    183a:	ad a3       	std	Y+37, r26	; 0x25
    183c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <LCD_sendCommand+0x176>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9a a3       	std	Y+34, r25	; 0x22
    185c:	89 a3       	std	Y+33, r24	; 0x21
    185e:	3f c0       	rjmp	.+126    	; 0x18de <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1860:	6b a1       	ldd	r22, Y+35	; 0x23
    1862:	7c a1       	ldd	r23, Y+36	; 0x24
    1864:	8d a1       	ldd	r24, Y+37	; 0x25
    1866:	9e a1       	ldd	r25, Y+38	; 0x26
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	6f a1       	ldd	r22, Y+39	; 0x27
    187a:	78 a5       	ldd	r23, Y+40	; 0x28
    187c:	89 a5       	ldd	r24, Y+41	; 0x29
    187e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9a a3       	std	Y+34, r25	; 0x22
    189e:	89 a3       	std	Y+33, r24	; 0x21
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_sendCommand+0x1d6>
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	98 a3       	std	Y+32, r25	; 0x20
    18a8:	8f 8f       	std	Y+31, r24	; 0x1f
    18aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ac:	98 a1       	ldd	r25, Y+32	; 0x20
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_sendCommand+0x1c4>
    18b2:	98 a3       	std	Y+32, r25	; 0x20
    18b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	89 a1       	ldd	r24, Y+33	; 0x21
    18b8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	9a a1       	ldd	r25, Y+34	; 0x22
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <LCD_sendCommand+0x1b8>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	6b a1       	ldd	r22, Y+35	; 0x23
    18cc:	7c a1       	ldd	r23, Y+36	; 0x24
    18ce:	8d a1       	ldd	r24, Y+37	; 0x25
    18d0:	9e a1       	ldd	r25, Y+38	; 0x26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	89 a3       	std	Y+33, r24	; 0x21
    18de:	89 a1       	ldd	r24, Y+33	; 0x21
    18e0:	9a a1       	ldd	r25, Y+34	; 0x22
    18e2:	9e 8f       	std	Y+30, r25	; 0x1e
    18e4:	8d 8f       	std	Y+29, r24	; 0x1d
    18e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_sendCommand+0x200>
    18ee:	9e 8f       	std	Y+30, r25	; 0x1e
    18f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    18f2:	eb e3       	ldi	r30, 0x3B	; 59
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	89 ad       	ldd	r24, Y+57	; 0x39
    18f8:	80 83       	st	Z, r24
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e8       	ldi	r26, 0x80	; 128
    1900:	bf e3       	ldi	r27, 0x3F	; 63
    1902:	89 8f       	std	Y+25, r24	; 0x19
    1904:	9a 8f       	std	Y+26, r25	; 0x1a
    1906:	ab 8f       	std	Y+27, r26	; 0x1b
    1908:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	69 8d       	ldd	r22, Y+25	; 0x19
    190c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1910:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	4a ef       	ldi	r20, 0xFA	; 250
    1918:	54 e4       	ldi	r21, 0x44	; 68
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8d 8b       	std	Y+21, r24	; 0x15
    1924:	9e 8b       	std	Y+22, r25	; 0x16
    1926:	af 8b       	std	Y+23, r26	; 0x17
    1928:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	2c f4       	brge	.+10     	; 0x194c <LCD_sendCommand+0x262>
		__ticks = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    194c:	6d 89       	ldd	r22, Y+21	; 0x15
    194e:	7e 89       	ldd	r23, Y+22	; 0x16
    1950:	8f 89       	ldd	r24, Y+23	; 0x17
    1952:	98 8d       	ldd	r25, Y+24	; 0x18
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	57 e4       	ldi	r21, 0x47	; 71
    195c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	4c f5       	brge	.+82     	; 0x19b6 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1964:	69 8d       	ldd	r22, Y+25	; 0x19
    1966:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9c 8b       	std	Y+20, r25	; 0x14
    198a:	8b 8b       	std	Y+19, r24	; 0x13
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <LCD_sendCommand+0x2c2>
    198e:	88 ec       	ldi	r24, 0xC8	; 200
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9a 8b       	std	Y+18, r25	; 0x12
    1994:	89 8b       	std	Y+17, r24	; 0x11
    1996:	89 89       	ldd	r24, Y+17	; 0x11
    1998:	9a 89       	ldd	r25, Y+18	; 0x12
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_sendCommand+0x2b0>
    199e:	9a 8b       	std	Y+18, r25	; 0x12
    19a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	8b 89       	ldd	r24, Y+19	; 0x13
    19a4:	9c 89       	ldd	r25, Y+20	; 0x14
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f7       	brne	.-38     	; 0x198e <LCD_sendCommand+0x2a4>
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	6d 89       	ldd	r22, Y+21	; 0x15
    19b8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ba:	8f 89       	ldd	r24, Y+23	; 0x17
    19bc:	98 8d       	ldd	r25, Y+24	; 0x18
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9c 8b       	std	Y+20, r25	; 0x14
    19c8:	8b 8b       	std	Y+19, r24	; 0x13
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	98 8b       	std	Y+16, r25	; 0x10
    19d0:	8f 87       	std	Y+15, r24	; 0x0f
    19d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d4:	98 89       	ldd	r25, Y+16	; 0x10
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_sendCommand+0x2ec>
    19da:	98 8b       	std	Y+16, r25	; 0x10
    19dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    19de:	a8 e3       	ldi	r26, 0x38	; 56
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e8 e3       	ldi	r30, 0x38	; 56
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8b 7f       	andi	r24, 0xFB	; 251
    19ea:	8c 93       	st	X, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 e8       	ldi	r26, 0x80	; 128
    19f2:	bf e3       	ldi	r27, 0x3F	; 63
    19f4:	8b 87       	std	Y+11, r24	; 0x0b
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	ad 87       	std	Y+13, r26	; 0x0d
    19fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a ef       	ldi	r20, 0xFA	; 250
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8f 83       	std	Y+7, r24	; 0x07
    1a16:	98 87       	std	Y+8, r25	; 0x08
    1a18:	a9 87       	std	Y+9, r26	; 0x09
    1a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <LCD_sendCommand+0x354>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <LCD_sendCommand+0x3b4>
    1a80:	88 ec       	ldi	r24, 0xC8	; 200
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCommand+0x3a2>
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <LCD_sendCommand+0x396>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <LCD_sendCommand+0x3de>
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1ad0:	e9 96       	adiw	r28, 0x39	; 57
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	e9 97       	sbiw	r28, 0x39	; 57
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1af8:	a8 e3       	ldi	r26, 0x38	; 56
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e8 e3       	ldi	r30, 0x38	; 56
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1b06:	a8 e3       	ldi	r26, 0x38	; 56
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e8 e3       	ldi	r30, 0x38	; 56
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8d 7f       	andi	r24, 0xFD	; 253
    1b12:	8c 93       	st	X, r24
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a0 e8       	ldi	r26, 0x80	; 128
    1b1a:	bf e3       	ldi	r27, 0x3F	; 63
    1b1c:	8d ab       	std	Y+53, r24	; 0x35
    1b1e:	9e ab       	std	Y+54, r25	; 0x36
    1b20:	af ab       	std	Y+55, r26	; 0x37
    1b22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b24:	6d a9       	ldd	r22, Y+53	; 0x35
    1b26:	7e a9       	ldd	r23, Y+54	; 0x36
    1b28:	8f a9       	ldd	r24, Y+55	; 0x37
    1b2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a ef       	ldi	r20, 0xFA	; 250
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	89 ab       	std	Y+49, r24	; 0x31
    1b3e:	9a ab       	std	Y+50, r25	; 0x32
    1b40:	ab ab       	std	Y+51, r26	; 0x33
    1b42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b44:	69 a9       	ldd	r22, Y+49	; 0x31
    1b46:	7a a9       	ldd	r23, Y+50	; 0x32
    1b48:	8b a9       	ldd	r24, Y+51	; 0x33
    1b4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	98 ab       	std	Y+48, r25	; 0x30
    1b62:	8f a7       	std	Y+47, r24	; 0x2f
    1b64:	3f c0       	rjmp	.+126    	; 0x1be4 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1b66:	69 a9       	ldd	r22, Y+49	; 0x31
    1b68:	7a a9       	ldd	r23, Y+50	; 0x32
    1b6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	4c f5       	brge	.+82     	; 0x1bd0 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b80:	7e a9       	ldd	r23, Y+54	; 0x36
    1b82:	8f a9       	ldd	r24, Y+55	; 0x37
    1b84:	98 ad       	ldd	r25, Y+56	; 0x38
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	98 ab       	std	Y+48, r25	; 0x30
    1ba4:	8f a7       	std	Y+47, r24	; 0x2f
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <LCD_displayCharacter+0xe4>
    1ba8:	88 ec       	ldi	r24, 0xC8	; 200
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e a7       	std	Y+46, r25	; 0x2e
    1bae:	8d a7       	std	Y+45, r24	; 0x2d
    1bb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_displayCharacter+0xd2>
    1bb8:	9e a7       	std	Y+46, r25	; 0x2e
    1bba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	98 ab       	std	Y+48, r25	; 0x30
    1bc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f7       	brne	.-38     	; 0x1ba8 <LCD_displayCharacter+0xc6>
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	98 ab       	std	Y+48, r25	; 0x30
    1be2:	8f a7       	std	Y+47, r24	; 0x2f
    1be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be6:	98 a9       	ldd	r25, Y+48	; 0x30
    1be8:	9c a7       	std	Y+44, r25	; 0x2c
    1bea:	8b a7       	std	Y+43, r24	; 0x2b
    1bec:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bee:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_displayCharacter+0x10e>
    1bf4:	9c a7       	std	Y+44, r25	; 0x2c
    1bf6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bf8:	a8 e3       	ldi	r26, 0x38	; 56
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e8 e3       	ldi	r30, 0x38	; 56
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	84 60       	ori	r24, 0x04	; 4
    1c04:	8c 93       	st	X, r24
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e8       	ldi	r26, 0x80	; 128
    1c0c:	bf e3       	ldi	r27, 0x3F	; 63
    1c0e:	8f a3       	std	Y+39, r24	; 0x27
    1c10:	98 a7       	std	Y+40, r25	; 0x28
    1c12:	a9 a7       	std	Y+41, r26	; 0x29
    1c14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c16:	6f a1       	ldd	r22, Y+39	; 0x27
    1c18:	78 a5       	ldd	r23, Y+40	; 0x28
    1c1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4a ef       	ldi	r20, 0xFA	; 250
    1c24:	54 e4       	ldi	r21, 0x44	; 68
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8b a3       	std	Y+35, r24	; 0x23
    1c30:	9c a3       	std	Y+36, r25	; 0x24
    1c32:	ad a3       	std	Y+37, r26	; 0x25
    1c34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c36:	6b a1       	ldd	r22, Y+35	; 0x23
    1c38:	7c a1       	ldd	r23, Y+36	; 0x24
    1c3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9a a3       	std	Y+34, r25	; 0x22
    1c54:	89 a3       	std	Y+33, r24	; 0x21
    1c56:	3f c0       	rjmp	.+126    	; 0x1cd6 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1c58:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	3f ef       	ldi	r19, 0xFF	; 255
    1c64:	4f e7       	ldi	r20, 0x7F	; 127
    1c66:	57 e4       	ldi	r21, 0x47	; 71
    1c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c6c:	18 16       	cp	r1, r24
    1c6e:	4c f5       	brge	.+82     	; 0x1cc2 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c70:	6f a1       	ldd	r22, Y+39	; 0x27
    1c72:	78 a5       	ldd	r23, Y+40	; 0x28
    1c74:	89 a5       	ldd	r24, Y+41	; 0x29
    1c76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e2       	ldi	r20, 0x20	; 32
    1c7e:	51 e4       	ldi	r21, 0x41	; 65
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9a a3       	std	Y+34, r25	; 0x22
    1c96:	89 a3       	std	Y+33, r24	; 0x21
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <LCD_displayCharacter+0x1d6>
    1c9a:	88 ec       	ldi	r24, 0xC8	; 200
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	98 a3       	std	Y+32, r25	; 0x20
    1ca0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ca2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ca4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_displayCharacter+0x1c4>
    1caa:	98 a3       	std	Y+32, r25	; 0x20
    1cac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cae:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	9a a3       	std	Y+34, r25	; 0x22
    1cb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cba:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	69 f7       	brne	.-38     	; 0x1c9a <LCD_displayCharacter+0x1b8>
    1cc0:	14 c0       	rjmp	.+40     	; 0x1cea <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9a a3       	std	Y+34, r25	; 0x22
    1cd4:	89 a3       	std	Y+33, r24	; 0x21
    1cd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cda:	9e 8f       	std	Y+30, r25	; 0x1e
    1cdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <LCD_displayCharacter+0x200>
    1ce6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1cea:	eb e3       	ldi	r30, 0x3B	; 59
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf0:	80 83       	st	Z, r24
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	89 8f       	std	Y+25, r24	; 0x19
    1cfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cfe:	ab 8f       	std	Y+27, r26	; 0x1b
    1d00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	69 8d       	ldd	r22, Y+25	; 0x19
    1d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8d 8b       	std	Y+21, r24	; 0x15
    1d1c:	9e 8b       	std	Y+22, r25	; 0x16
    1d1e:	af 8b       	std	Y+23, r26	; 0x17
    1d20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1d44:	6d 89       	ldd	r22, Y+21	; 0x15
    1d46:	7e 89       	ldd	r23, Y+22	; 0x16
    1d48:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9c 8b       	std	Y+20, r25	; 0x14
    1d82:	8b 8b       	std	Y+19, r24	; 0x13
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <LCD_displayCharacter+0x2c2>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9a 8b       	std	Y+18, r25	; 0x12
    1d8c:	89 8b       	std	Y+17, r24	; 0x11
    1d8e:	89 89       	ldd	r24, Y+17	; 0x11
    1d90:	9a 89       	ldd	r25, Y+18	; 0x12
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_displayCharacter+0x2b0>
    1d96:	9a 8b       	std	Y+18, r25	; 0x12
    1d98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8b 89       	ldd	r24, Y+19	; 0x13
    1da6:	9c 89       	ldd	r25, Y+20	; 0x14
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <LCD_displayCharacter+0x2a4>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	98 8b       	std	Y+16, r25	; 0x10
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	98 89       	ldd	r25, Y+16	; 0x10
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_displayCharacter+0x2ec>
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1dd6:	a8 e3       	ldi	r26, 0x38	; 56
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e8 e3       	ldi	r30, 0x38	; 56
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8b 7f       	andi	r24, 0xFB	; 251
    1de2:	8c 93       	st	X, r24
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e8       	ldi	r26, 0x80	; 128
    1dea:	bf e3       	ldi	r27, 0x3F	; 63
    1dec:	8b 87       	std	Y+11, r24	; 0x0b
    1dee:	9c 87       	std	Y+12, r25	; 0x0c
    1df0:	ad 87       	std	Y+13, r26	; 0x0d
    1df2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	4a ef       	ldi	r20, 0xFA	; 250
    1e02:	54 e4       	ldi	r21, 0x44	; 68
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8f 83       	std	Y+7, r24	; 0x07
    1e0e:	98 87       	std	Y+8, r25	; 0x08
    1e10:	a9 87       	std	Y+9, r26	; 0x09
    1e12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	5f e3       	ldi	r21, 0x3F	; 63
    1e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e28:	88 23       	and	r24, r24
    1e2a:	2c f4       	brge	.+10     	; 0x1e36 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	3f c0       	rjmp	.+126    	; 0x1eb4 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1e36:	6f 81       	ldd	r22, Y+7	; 0x07
    1e38:	78 85       	ldd	r23, Y+8	; 0x08
    1e3a:	89 85       	ldd	r24, Y+9	; 0x09
    1e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	3f ef       	ldi	r19, 0xFF	; 255
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	57 e4       	ldi	r21, 0x47	; 71
    1e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	4c f5       	brge	.+82     	; 0x1ea0 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e2       	ldi	r20, 0x20	; 32
    1e5c:	51 e4       	ldi	r21, 0x41	; 65
    1e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <LCD_displayCharacter+0x3b4>
    1e78:	88 ec       	ldi	r24, 0xC8	; 200
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LCD_displayCharacter+0x3a2>
    1e88:	9c 83       	std	Y+4, r25	; 0x04
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	69 f7       	brne	.-38     	; 0x1e78 <LCD_displayCharacter+0x396>
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea2:	78 85       	ldd	r23, Y+8	; 0x08
    1ea4:	89 85       	ldd	r24, Y+9	; 0x09
    1ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_displayCharacter+0x3de>
    1ec4:	9a 83       	std	Y+2, r25	; 0x02
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1ec8:	e9 96       	adiw	r28, 0x39	; 57
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <LCD_displayString+0x6>
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9b 83       	std	Y+3, r25	; 0x03
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eea:	19 82       	std	Y+1, r1	; 0x01
    1eec:	0e c0       	rjmp	.+28     	; 0x1f0a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	80 81       	ld	r24, Z
    1f00:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <LCD_displayCharacter>
		i++;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	fc 01       	movw	r30, r24
    1f16:	e2 0f       	add	r30, r18
    1f18:	f3 1f       	adc	r31, r19
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	39 f7       	brne	.-50     	; 0x1eee <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <LCD_goToRowColumn+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <LCD_goToRowColumn+0x8>
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3d 83       	std	Y+5, r19	; 0x05
    1f46:	2c 83       	std	Y+4, r18	; 0x04
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	c1 f0       	breq	.+48     	; 0x1f82 <LCD_goToRowColumn+0x56>
    1f52:	2c 81       	ldd	r18, Y+4	; 0x04
    1f54:	3d 81       	ldd	r19, Y+5	; 0x05
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_goToRowColumn+0x3a>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <LCD_goToRowColumn+0x50>
    1f64:	19 c0       	rjmp	.+50     	; 0x1f98 <LCD_goToRowColumn+0x6c>
    1f66:	2c 81       	ldd	r18, Y+4	; 0x04
    1f68:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	69 f0       	breq	.+26     	; 0x1f8a <LCD_goToRowColumn+0x5e>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <LCD_goToRowColumn+0x66>
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	0b c0       	rjmp	.+22     	; 0x1f98 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	80 5c       	subi	r24, 0xC0	; 192
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	80 5f       	subi	r24, 0xF0	; 240
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	03 c0       	rjmp	.+6      	; 0x1f98 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	80 5b       	subi	r24, 0xB0	; 176
    1f96:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	80 68       	ori	r24, 0x80	; 128
    1f9c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <LCD_displayStringRowColumn+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <LCD_displayStringRowColumn+0x8>
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	6a 83       	std	Y+2, r22	; 0x02
    1fc0:	5c 83       	std	Y+4, r21	; 0x04
    1fc2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	6a 81       	ldd	r22, Y+2	; 0x02
    1fc8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayString>
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	62 97       	sbiw	r28, 0x12	; 18
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1ffa:	89 89       	ldd	r24, Y+17	; 0x11
    1ffc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffe:	9e 01       	movw	r18, r28
    2000:	2f 5f       	subi	r18, 0xFF	; 255
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	b9 01       	movw	r22, r18
    2006:	4a e0       	ldi	r20, 0x0A	; 10
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	0e 94 c1 11 	call	0x2382	; 0x2382 <itoa>
   LCD_displayString(buff);
    200e:	ce 01       	movw	r24, r28
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayString>
}
    2016:	62 96       	adiw	r28, 0x12	; 18
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <PW_checkPassword>:


// this function will check the password which being sent by comparing it with the password in the external EEPROM

uint8 PW_checkPassword(uint8 array1[] , uint8 array2[])
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	28 97       	sbiw	r28, 0x08	; 8
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	9d 83       	std	Y+5, r25	; 0x05
    2052:	8c 83       	std	Y+4, r24	; 0x04
    2054:	7f 83       	std	Y+7, r23	; 0x07
    2056:	6e 83       	std	Y+6, r22	; 0x06
	uint8 compare = 0;
    2058:	1b 82       	std	Y+3, r1	; 0x03
	for(int i = 0 ; i < PASSWORD_DIGITS ; i++)
    205a:	1a 82       	std	Y+2, r1	; 0x02
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	1a c0       	rjmp	.+52     	; 0x2094 <PW_checkPassword+0x58>
	{
		if(array1[i] == array2[i])
    2060:	29 81       	ldd	r18, Y+1	; 0x01
    2062:	3a 81       	ldd	r19, Y+2	; 0x02
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	9d 81       	ldd	r25, Y+5	; 0x05
    2068:	fc 01       	movw	r30, r24
    206a:	e2 0f       	add	r30, r18
    206c:	f3 1f       	adc	r31, r19
    206e:	40 81       	ld	r20, Z
    2070:	29 81       	ldd	r18, Y+1	; 0x01
    2072:	3a 81       	ldd	r19, Y+2	; 0x02
    2074:	8e 81       	ldd	r24, Y+6	; 0x06
    2076:	9f 81       	ldd	r25, Y+7	; 0x07
    2078:	fc 01       	movw	r30, r24
    207a:	e2 0f       	add	r30, r18
    207c:	f3 1f       	adc	r31, r19
    207e:	80 81       	ld	r24, Z
    2080:	48 17       	cp	r20, r24
    2082:	19 f4       	brne	.+6      	; 0x208a <PW_checkPassword+0x4e>
		{
			compare ++;
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	8b 83       	std	Y+3, r24	; 0x03
// this function will check the password which being sent by comparing it with the password in the external EEPROM

uint8 PW_checkPassword(uint8 array1[] , uint8 array2[])
{
	uint8 compare = 0;
	for(int i = 0 ; i < PASSWORD_DIGITS ; i++)
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	84 30       	cpi	r24, 0x04	; 4
    209a:	91 05       	cpc	r25, r1
    209c:	0c f3       	brlt	.-62     	; 0x2060 <PW_checkPassword+0x24>
		{
			compare ++;
		}
	}

	if(compare == PASSWORD_DIGITS)
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	19 f4       	brne	.+6      	; 0x20aa <PW_checkPassword+0x6e>
		return TRUE;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	88 87       	std	Y+8, r24	; 0x08
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <PW_checkPassword+0x70>
	else
		return FALSE;
    20aa:	18 86       	std	Y+8, r1	; 0x08
    20ac:	88 85       	ldd	r24, Y+8	; 0x08
}
    20ae:	28 96       	adiw	r28, 0x08	; 8
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <readyToSend>:
  * we will change the password into a string to be sent
  * this function will take two arrays array 1 is the passowrd as number
  * and array2 is where we store the string
  */
void readyToSend(uint8 array1[], uint8 array2[])
 {
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <readyToSend+0x6>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <readyToSend+0x8>
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9b 83       	std	Y+3, r25	; 0x03
    20d0:	8a 83       	std	Y+2, r24	; 0x02
    20d2:	7d 83       	std	Y+5, r23	; 0x05
    20d4:	6c 83       	std	Y+4, r22	; 0x04
	sint8 i ;
	for(i = 0 ; i < 5 ; i++)
    20d6:	19 82       	std	Y+1, r1	; 0x01
    20d8:	29 c0       	rjmp	.+82     	; 0x212c <readyToSend+0x6c>
	{
		if(i==4)
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	84 30       	cpi	r24, 0x04	; 4
    20de:	69 f4       	brne	.+26     	; 0x20fa <readyToSend+0x3a>
		{
			array2[i] = '#';		//making last element of the array2 # as finishing the string
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	28 2f       	mov	r18, r24
    20e4:	33 27       	eor	r19, r19
    20e6:	27 fd       	sbrc	r18, 7
    20e8:	30 95       	com	r19
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	fc 01       	movw	r30, r24
    20f0:	e2 0f       	add	r30, r18
    20f2:	f3 1f       	adc	r31, r19
    20f4:	83 e2       	ldi	r24, 0x23	; 35
    20f6:	80 83       	st	Z, r24
    20f8:	16 c0       	rjmp	.+44     	; 0x2126 <readyToSend+0x66>
		}
		else
		{
		array2[i] = array1[i];		// storing all element of array1 into array2
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	28 2f       	mov	r18, r24
    20fe:	33 27       	eor	r19, r19
    2100:	27 fd       	sbrc	r18, 7
    2102:	30 95       	com	r19
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	9d 81       	ldd	r25, Y+5	; 0x05
    2108:	dc 01       	movw	r26, r24
    210a:	a2 0f       	add	r26, r18
    210c:	b3 1f       	adc	r27, r19
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	28 2f       	mov	r18, r24
    2112:	33 27       	eor	r19, r19
    2114:	27 fd       	sbrc	r18, 7
    2116:	30 95       	com	r19
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	9b 81       	ldd	r25, Y+3	; 0x03
    211c:	fc 01       	movw	r30, r24
    211e:	e2 0f       	add	r30, r18
    2120:	f3 1f       	adc	r31, r19
    2122:	80 81       	ld	r24, Z
    2124:	8c 93       	st	X, r24
  * and array2 is where we store the string
  */
void readyToSend(uint8 array1[], uint8 array2[])
 {
	sint8 i ;
	for(i = 0 ; i < 5 ; i++)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	8f 5f       	subi	r24, 0xFF	; 255
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	85 30       	cpi	r24, 0x05	; 5
    2130:	a4 f2       	brlt	.-88     	; 0x20da <readyToSend+0x1a>
		{
		array2[i] = array1[i];		// storing all element of array1 into array2
		}
	}

 }
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(UART_ConfigType *Config_PTR)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <UART_init+0x6>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2150:	eb e2       	ldi	r30, 0x2B	; 43
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2158:	ea e2       	ldi	r30, 0x2A	; 42
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	88 e1       	ldi	r24, 0x18	; 24
    215e:	80 83       	st	Z, r24
	 * UPM1:0  = CONFIGURABLE
	 * USBS    = CONFIGURABLE
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    2160:	e0 e4       	ldi	r30, 0x40	; 64
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 e8       	ldi	r24, 0x80	; 128
    2166:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_PTR->parity)<<4);
    2168:	a0 e4       	ldi	r26, 0x40	; 64
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e0 e4       	ldi	r30, 0x40	; 64
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	28 2f       	mov	r18, r24
    2174:	2f 7c       	andi	r18, 0xCF	; 207
    2176:	e9 81       	ldd	r30, Y+1	; 0x01
    2178:	fa 81       	ldd	r31, Y+2	; 0x02
    217a:	80 81       	ld	r24, Z
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	82 95       	swap	r24
    2182:	92 95       	swap	r25
    2184:	90 7f       	andi	r25, 0xF0	; 240
    2186:	98 27       	eor	r25, r24
    2188:	80 7f       	andi	r24, 0xF0	; 240
    218a:	98 27       	eor	r25, r24
    218c:	82 2b       	or	r24, r18
    218e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_PTR->stopBit)<<3);
    2190:	a0 e4       	ldi	r26, 0x40	; 64
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e0 e4       	ldi	r30, 0x40	; 64
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	28 2f       	mov	r18, r24
    219c:	27 7f       	andi	r18, 0xF7	; 247
    219e:	e9 81       	ldd	r30, Y+1	; 0x01
    21a0:	fa 81       	ldd	r31, Y+2	; 0x02
    21a2:	81 81       	ldd	r24, Z+1	; 0x01
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	82 2b       	or	r24, r18
    21b6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_PTR->charSize)<<1);
    21b8:	a0 e4       	ldi	r26, 0x40	; 64
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e0 e4       	ldi	r30, 0x40	; 64
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	28 2f       	mov	r18, r24
    21c4:	29 7f       	andi	r18, 0xF9	; 249
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	82 2b       	or	r24, r18
    21d6:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    21d8:	e0 e4       	ldi	r30, 0x40	; 64
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    21de:	e9 e2       	ldi	r30, 0x29	; 41
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	87 e6       	ldi	r24, 0x67	; 103
    21e4:	80 83       	st	Z, r24
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	0f 92       	push	r0
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21fc:	eb e2       	ldi	r30, 0x2B	; 43
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	80 72       	andi	r24, 0x20	; 32
    2208:	90 70       	andi	r25, 0x00	; 0
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	b9 f3       	breq	.-18     	; 0x21fc <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    220e:	ec e2       	ldi	r30, 0x2C	; 44
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2226:	eb e2       	ldi	r30, 0x2B	; 43
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	88 23       	and	r24, r24
    222e:	dc f7       	brge	.-10     	; 0x2226 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2230:	ec e2       	ldi	r30, 0x2C	; 44
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <UART_sendString+0x6>
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	9b 83       	std	Y+3, r25	; 0x03
    224a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    224c:	19 82       	std	Y+1, r1	; 0x01
    224e:	0e c0       	rjmp	.+28     	; 0x226c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	9b 81       	ldd	r25, Y+3	; 0x03
    225a:	fc 01       	movw	r30, r24
    225c:	e2 0f       	add	r30, r18
    225e:	f3 1f       	adc	r31, r19
    2260:	80 81       	ld	r24, Z
    2262:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <UART_sendByte>
		i++;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	fc 01       	movw	r30, r24
    2278:	e2 0f       	add	r30, r18
    227a:	f3 1f       	adc	r31, r19
    227c:	80 81       	ld	r24, Z
    227e:	88 23       	and	r24, r24
    2280:	39 f7       	brne	.-50     	; 0x2250 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <UART_receiveString+0xa>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	9b 83       	std	Y+3, r25	; 0x03
    22a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22a2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	8c 01       	movw	r16, r24
    22b0:	02 0f       	add	r16, r18
    22b2:	13 1f       	adc	r17, r19
    22b4:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_recieveByte>
    22b8:	f8 01       	movw	r30, r16
    22ba:	80 83       	st	Z, r24
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	9b 81       	ldd	r25, Y+3	; 0x03
    22ce:	8c 01       	movw	r16, r24
    22d0:	02 0f       	add	r16, r18
    22d2:	13 1f       	adc	r17, r19
    22d4:	0e 94 0f 11 	call	0x221e	; 0x221e <UART_recieveByte>
    22d8:	f8 01       	movw	r30, r16
    22da:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	fc 01       	movw	r30, r24
    22e8:	e2 0f       	add	r30, r18
    22ea:	f3 1f       	adc	r31, r19
    22ec:	80 81       	ld	r24, Z
    22ee:	83 32       	cpi	r24, 0x23	; 35
    22f0:	31 f7       	brne	.-52     	; 0x22be <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	9b 81       	ldd	r25, Y+3	; 0x03
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	10 82       	st	Z, r1
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	08 95       	ret

00002314 <__prologue_saves__>:
    2314:	2f 92       	push	r2
    2316:	3f 92       	push	r3
    2318:	4f 92       	push	r4
    231a:	5f 92       	push	r5
    231c:	6f 92       	push	r6
    231e:	7f 92       	push	r7
    2320:	8f 92       	push	r8
    2322:	9f 92       	push	r9
    2324:	af 92       	push	r10
    2326:	bf 92       	push	r11
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	ca 1b       	sub	r28, r26
    233e:	db 0b       	sbc	r29, r27
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	09 94       	ijmp

0000234c <__epilogue_restores__>:
    234c:	2a 88       	ldd	r2, Y+18	; 0x12
    234e:	39 88       	ldd	r3, Y+17	; 0x11
    2350:	48 88       	ldd	r4, Y+16	; 0x10
    2352:	5f 84       	ldd	r5, Y+15	; 0x0f
    2354:	6e 84       	ldd	r6, Y+14	; 0x0e
    2356:	7d 84       	ldd	r7, Y+13	; 0x0d
    2358:	8c 84       	ldd	r8, Y+12	; 0x0c
    235a:	9b 84       	ldd	r9, Y+11	; 0x0b
    235c:	aa 84       	ldd	r10, Y+10	; 0x0a
    235e:	b9 84       	ldd	r11, Y+9	; 0x09
    2360:	c8 84       	ldd	r12, Y+8	; 0x08
    2362:	df 80       	ldd	r13, Y+7	; 0x07
    2364:	ee 80       	ldd	r14, Y+6	; 0x06
    2366:	fd 80       	ldd	r15, Y+5	; 0x05
    2368:	0c 81       	ldd	r16, Y+4	; 0x04
    236a:	1b 81       	ldd	r17, Y+3	; 0x03
    236c:	aa 81       	ldd	r26, Y+2	; 0x02
    236e:	b9 81       	ldd	r27, Y+1	; 0x01
    2370:	ce 0f       	add	r28, r30
    2372:	d1 1d       	adc	r29, r1
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	ed 01       	movw	r28, r26
    2380:	08 95       	ret

00002382 <itoa>:
    2382:	fb 01       	movw	r30, r22
    2384:	9f 01       	movw	r18, r30
    2386:	e8 94       	clt
    2388:	42 30       	cpi	r20, 0x02	; 2
    238a:	c4 f0       	brlt	.+48     	; 0x23bc <itoa+0x3a>
    238c:	45 32       	cpi	r20, 0x25	; 37
    238e:	b4 f4       	brge	.+44     	; 0x23bc <itoa+0x3a>
    2390:	4a 30       	cpi	r20, 0x0A	; 10
    2392:	29 f4       	brne	.+10     	; 0x239e <itoa+0x1c>
    2394:	97 fb       	bst	r25, 7
    2396:	1e f4       	brtc	.+6      	; 0x239e <itoa+0x1c>
    2398:	90 95       	com	r25
    239a:	81 95       	neg	r24
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	64 2f       	mov	r22, r20
    23a0:	77 27       	eor	r23, r23
    23a2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__udivmodhi4>
    23a6:	80 5d       	subi	r24, 0xD0	; 208
    23a8:	8a 33       	cpi	r24, 0x3A	; 58
    23aa:	0c f0       	brlt	.+2      	; 0x23ae <itoa+0x2c>
    23ac:	89 5d       	subi	r24, 0xD9	; 217
    23ae:	81 93       	st	Z+, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	a1 f7       	brne	.-24     	; 0x239e <itoa+0x1c>
    23b6:	16 f4       	brtc	.+4      	; 0x23bc <itoa+0x3a>
    23b8:	5d e2       	ldi	r21, 0x2D	; 45
    23ba:	51 93       	st	Z+, r21
    23bc:	10 82       	st	Z, r1
    23be:	c9 01       	movw	r24, r18
    23c0:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <strrev>

000023c4 <strrev>:
    23c4:	dc 01       	movw	r26, r24
    23c6:	fc 01       	movw	r30, r24
    23c8:	67 2f       	mov	r22, r23
    23ca:	71 91       	ld	r23, Z+
    23cc:	77 23       	and	r23, r23
    23ce:	e1 f7       	brne	.-8      	; 0x23c8 <strrev+0x4>
    23d0:	32 97       	sbiw	r30, 0x02	; 2
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <strrev+0x18>
    23d4:	7c 91       	ld	r23, X
    23d6:	6d 93       	st	X+, r22
    23d8:	70 83       	st	Z, r23
    23da:	62 91       	ld	r22, -Z
    23dc:	ae 17       	cp	r26, r30
    23de:	bf 07       	cpc	r27, r31
    23e0:	c8 f3       	brcs	.-14     	; 0x23d4 <strrev+0x10>
    23e2:	08 95       	ret

000023e4 <__udivmodhi4>:
    23e4:	aa 1b       	sub	r26, r26
    23e6:	bb 1b       	sub	r27, r27
    23e8:	51 e1       	ldi	r21, 0x11	; 17
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <__udivmodhi4_ep>

000023ec <__udivmodhi4_loop>:
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	a6 17       	cp	r26, r22
    23f2:	b7 07       	cpc	r27, r23
    23f4:	10 f0       	brcs	.+4      	; 0x23fa <__udivmodhi4_ep>
    23f6:	a6 1b       	sub	r26, r22
    23f8:	b7 0b       	sbc	r27, r23

000023fa <__udivmodhi4_ep>:
    23fa:	88 1f       	adc	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	5a 95       	dec	r21
    2400:	a9 f7       	brne	.-22     	; 0x23ec <__udivmodhi4_loop>
    2402:	80 95       	com	r24
    2404:	90 95       	com	r25
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	08 95       	ret

0000240c <_exit>:
    240c:	f8 94       	cli

0000240e <__stop_program>:
    240e:	ff cf       	rjmp	.-2      	; 0x240e <__stop_program>
